---
title: "TestBench"
author: "Brent Wilderman"
date: "6/08/2024"
format: 
  html:
    code-fold: true
execute:
  echo: false
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
library(conflicted)
library(tidyverse)
library(DBI)
library(duckdb)
library(MASS)
library(ggiraph)
library(scales)
library(ggthemes)
library(lubridate)
library(patchwork)
library(RColorBrewer)
library(PerformanceAnalytics)
library(slider)
library(tsbox)
library(purrr)
library(glue)
filter <- dplyr::filter
lag <- dplyr::lag
select <- dplyr::select
first <- dplyr::first
last <- dplyr::last
```

```{r}
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/bawil/Documents/StockData/Databases/spyanalysis.db", read_only = FALSE)
```

```{r}
result <- dbGetQuery(
  con,
  "WITH spy_dividend_cte AS (
  	SELECT 
  		time_bucket(to_months(1), dt) as dt,
  		max(dividend) AS dividend,
  	FROM spy_1d_dividends
  	where dt >= '1993-02-01'
  	group by time_bucket(to_months(1), dt)
  	order by time_bucket(to_months(1), dt)
  )
  SELECT m.*, 
  	hl.* EXCLUDE (dt),
  	cd.* EXCLUDE (dt),
  	d.* EXCLUDE (dt),
  	ga.* EXCLUDE (dt),
  	sp.* EXCLUDE (dt),
  	fc.* EXCLUDE (dt),
  	div.* EXCLUDE(dt),
  FROM spy_monthly m
  	LEFT JOIN spy_monthly_highlow hl ON m.dt = hl.dt
  	LEFT JOIN spy_monthly_consec_dir cd ON m.dt = cd.dt
  	LEFT JOIN spy_monthly_decycler125 d ON m.dt = d.dt
  	LEFT JOIN spy_monthly_geomavg5 ga ON m.dt = ga.dt
  	LEFT JOIN spy_monthly_augenspikes sp ON m.dt = sp.dt
  	LEFT JOIN spy_monthly_factorcalcs fc ON m.dt = fc.dt
  	LEFT JOIN spy_dividend_cte div ON m.dt = div.dt
  ORDER BY m.dt;")
```

```{r}
glimpse(result)
```

```{r}
dec_slope_qtiles <- quantile(result$decycler_slope, na.rm = TRUE)

dec_slope_iqr <- dec_slope_qtiles["75%"] - dec_slope_qtiles["25%"]

#dec_slope_loutlier <- dec_slope_qtiles["25%"] - (1.5 * dec_slope_iqr)
#dec_slope_uoutlier <- dec_slope_qtiles["75%"] + (1.5 * dec_slope_iqr)
```

```{r}
fmt_result <- result |>
  mutate(
    dec_slope_lqt = dec_slope_qtiles["25%"],
    dec_slope_mdn = dec_slope_qtiles["50%"],
    dec_slope_uqt = dec_slope_qtiles["75%"],
    month = factor(format(result$dt, "%b"), month.abb, ordered = TRUE),
    tt_label = glue::glue(
      "Month: {format(dt, '%b, %Y')}\n",
      "Change: {percent(c2c_pct, accuracy = 0.01)}\n",
      "Slope: {percent(decycler_slope, accuracy = 0.01)}")
  ) |>
  dplyr::select(dt, mth_nm, c2c_pct, decycler_slope, dec_slope_lqt, dec_slope_mdn, dec_slope_uqt, month, tt_label)
```

```{r}
#tcm <- ggthemes_data$tableau$`color-palettes`$regular$`Classic Cyclic`
#tcm
tcc12 <- ggthemes_data$tableau$`color-palettes`$regular$`Classic Cyclic` |> dplyr::slice(1:12) |> pull(value)

names(tcc12) <- c(levels(fmt_result$month))
tcc12
```

### Comparisons

@fig-comparisons Decycler slope's effect on monthly return.

```{r}
#| label: fig-comparisons
#| fig-cap: "Decycler Slope vs Return Percent."
#| warning: false

test_plot <- ggplot(fmt_result, aes(c2c_pct, decycler_slope, colour = month)) + 
  geom_point_interactive(aes(tooltip = tt_label, `data-id` = month), extra_interactive_params = "data-id") +
  geom_vline(aes(xintercept = 0.0), color = "black") +
  geom_hline(aes(yintercept = dec_slope_mdn), color = "black", alpha = 0.75) +
  geom_hline(aes(yintercept = dec_slope_lqt), color = "black", alpha = 0.5, linetype = "dashed") +
  geom_hline(aes(yintercept = dec_slope_uqt), color = "black", alpha = 0.5, linetype = "dashed") +
  labs(title = "Log Decyler Slope % vs. Log Price Chance %",
       subtitle = "box plot overlayed for decycler slope") +
  guides(color = guide_legend(title = "Month")) +
  theme_bw() +
  #scale_color_tableau(palette = "Classic Cyclic")
  scale_color_manual_interactive(values = tcc12, extra_interactive_params = "data-id", `data-id` = unique(fmt_result$month), data_id = function(breaks) as.character(breaks))

girafe(ggobj = test_plot,
  options = list(
    opts_sizing(rescale = TRUE),
    opts_toolbar(saveaspng = FALSE),
    opts_zoom(min = 0.5, max = 4),
    opts_hover(css = ''),
    opts_hover_inv(css = "opacity:0.1;"), 
    #opts_hover_key(css = ''),
    opts_sizing(rescale = FALSE),
    opts_tooltip(
      css = htmltools::css(
        background = 'darkslategrey',
        border = '1px solid darkslategrey;',
        padding = '5px',
        font_weight = 600
      )
    )
  )#,
  #height_svg = 4,
  #width_svg = 6
)
```

```{r}
ggplot(result, aes(x = factor(yr_dir), y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = factor(yr_dir)), 
    alpha = 0.7,
    show.legend = FALSE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = factor(yr_dir)), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75) +
  theme_bw() +
  scale_color_tableau(palette = "Classic 10")
```

```{r}
#| fig-width: 10
#| fig-height: 20
decades <- result |>
  mutate(
    month = factor(format(result$dt, "%b"), month.abb, ordered = TRUE),
    year = year(dt),
    yr = factor(format(result$dt, '%Y'), unique(year(dt)), ordered = TRUE),
    decade = glue::glue("{format(dt - years((year(dt) %% 10)), '%Y')}'s"),
  ) |>
  dplyr::select(dt, ytd_pct, month, year, yr, decade)

ggplot(decades, aes(month, ytd_pct, group = yr)) +
  geom_line(aes(color = yr)) +
  geom_hline(aes(yintercept = 0), color = "black", alpha = 0.5, linetype = "dashed") +
  theme_bw() +
  facet_wrap(~decade, ncol = 1, scales = "free_y")
```

### YTD Returns by Decade

Annual Percentage Returns.

```{r, message=FALSE, results='hide', echo=FALSE}
#| warning: false

# TODO: make custom color scheme for 10 variables
decades_split <- decades |>
  nest(.by = decade) |>
  mutate(plot = map2(decade, data,  function (.x,.y) {
    ggplot(data = .y, aes(x =  month, y = ytd_pct, group = yr)) +
      geom_line(aes(color = yr)) +
      geom_hline(aes(yintercept = 0), color = "black", alpha = 0.5, linetype = "dashed") +
      theme_bw() +
      scale_color_tableau(palette = "Classic Cyclic") +
      ggtitle(label = .x) +
      scale_y_continuous(labels = scales::percent_format()) +
      labs(x = NULL, y = "YTD %", color = NULL)
      #+ theme(aspect.ratio=1/4)
  }))

#decades_split$plot[[1]] / decades_split$plot[[2]] / decades_split$plot[[3]] + plot_layout(axis_titles = "collect", heights = c(4, 4, 4))
#print(decades_split$plot)
decades_split$plot
```

```{r}
annual_high_low <- result |>
  filter(high_row == 1 | low_row == 1) |>
  mutate(
    month = factor(format(dt, "%b"), month.abb, ordered = TRUE),
    high_low = factor(ifelse(high_row == 1, "High", "Low"), levels = c("Low", "High")),
    yr_up_down = factor(ifelse(yr_dir == 1, "Up", "Down"), levels = c("Up", "Down"))
  ) |>
  select(dt, month, yr_up_down, high_low)

#high_low_colors <- brewer_pal(3, "Set1")

ggplot(annual_high_low, aes(month)) +
  geom_bar(aes(fill = high_low)) +
  scale_fill_manual(values = c("#E41A1C", "#4DAF4A")) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    legend.position = "bottom",
    strip.background=element_rect(colour="black", fill="white")) +
  labs(
    title = "Count of Lows & Highs by Month",
    subtitle = "Up vs. Down Years",
    x = NULL, 
    y = NULL, 
    fill = NULL) +
  facet_grid(yr_up_down ~ high_low, scales = "free_y")
```

```{r}
bartype_sum <- ggplot(result |>
  group_by(bar_type) |>
  summarize_at("c2c_pct", sum, na.rm=TRUE),
  aes(x=bar_type, weight= c2c_pct, fill = bar_type)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(subtitle = "Sum of % Returns by Bar Type", x = NULL, y = NULL, fill = NULL) +
  scale_fill_brewer(palette = "Set1") +
  theme_hc()

bartype_cnt <- ggplot(result |> select(bar_type), aes(bar_type, fill = bar_type)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  labs(subtitle = "Count of Bar Type", x = NULL, y = NULL, fill = NULL) +
  scale_fill_brewer(palette = "Set1") +
  theme_hc()

bartype_distr <- ggplot(result |> select(bar_type, c2c_pct), aes(x = bar_type, y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = bar_type), 
    alpha = 0.7,
    show.legend = FALSE,
    na.rm = TRUE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = bar_type), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75,
    na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    subtitle = "Distribution (%) of Returns by Bar Type", 
    x = NULL, 
    y = NULL, 
    color = NULL) +
  scale_color_brewer(palette = "Set1") +
  theme_hc()

((bartype_distr + (bartype_cnt / bartype_sum)) / guide_area()) + 
  plot_layout(guides = "collect", heights = c(4,1))
```

```{r}
barTypeBreakdown <- dbGetQuery(
  con,
  "WITH factors_cte AS (
      SELECT m.*, 
      	fc.* EXCLUDE (dt),
      FROM spy_monthly m
      	LEFT JOIN spy_monthly_factorcalcs fc ON m.dt = fc.dt
      ORDER BY m.dt
  )
  select round(open_prev_rng, 1) as open_prev_rng, 
  	count(o2c_pct) as cnt, 
  	sum(o2c_pct) as sum_o2c_pct, 
  	quantile_cont(o2c_pct, [0.25, 0.5, 0.75]) as o2c_pct_dist,
  from factors_cte
  where open_prev_rng is not null
  group by round(open_prev_rng, 1)
  order by round(open_prev_rng, 1) desc;")
```

```{r}
#result |>
#  filter(!is.na(open_prev_rng)) |>
#  mutate(opr_rnd = round(open_prev_rng, 1)) |>
#  arrange(opr_rnd) |>
#  group_by(opr_fctr = factor(
#    percent(opr_rnd),
#    levels = percent(unique(opr_rnd)),
#    ordered = TRUE)) |>
#  summarize_at("c2c_pct", sum, na.rm=TRUE)

result |>
  filter(!is.na(open_prev_rng)) |>
  mutate(opr_rnd = round(open_prev_rng, 1)) |>
  arrange(opr_rnd) |>
  mutate(opr_fctr = factor(
    percent(opr_rnd),
    levels = percent(unique(opr_rnd)),
    ordered = TRUE)) |>
  select(opr_rnd, opr_fctr, c2c_pct)
```

```{r}
#| fig-width: 10
#| fig-height: 12

fills <- c(sapply(c("Set1", "Set2"), function(x) brewer.pal(8, x)))

prev_rng_sum <- ggplot(result |>
  filter(!is.na(open_prev_rng)) |>
  mutate(opr_rnd = round(open_prev_rng, 1)) |>
  arrange(opr_rnd) |>
  group_by(opr_fctr = factor(
    percent(opr_rnd),
    levels = percent(unique(opr_rnd)),
    ordered = TRUE)) |>
  summarize_at("c2c_pct", sum, na.rm=TRUE),
  aes(x=opr_fctr, weight= c2c_pct, fill = opr_fctr)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    subtitle = "Sum of % Returns by Open Price as % of Prev. Range", 
    x = NULL, 
    y = NULL, 
    fill = NULL) +
  scale_fill_manual(values = fills) +
  theme_hc() + 
  guides(fill = guide_legend(ncol = 7, byrow = TRUE))

prev_rng_cnt <- ggplot(result |>
    filter(!is.na(open_prev_rng)) |>
    mutate(opr_rnd = round(open_prev_rng, 1)) |>
    arrange(opr_rnd) |>
    mutate(opr_fctr = factor(
      percent(opr_rnd),
      levels = percent(unique(opr_rnd)),
      ordered = TRUE)) |>
    select(opr_rnd, opr_fctr), 
    aes(opr_fctr, fill = opr_fctr)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  labs(subtitle = "Count of Open Price as % of Prev. Range", x = NULL, y = NULL, fill = NULL) +
  scale_fill_manual(values = fills) +
  theme_hc() + 
  guides(fill = guide_legend(ncol = 7, byrow = TRUE))

prev_rng_distr <- ggplot(result |>
  filter(!is.na(open_prev_rng)) |>
  mutate(opr_rnd = round(open_prev_rng, 1)) |>
  arrange(opr_rnd) |>
  mutate(opr_fctr = factor(
    percent(opr_rnd),
    levels = percent(unique(opr_rnd)),
    ordered = TRUE)) |>
  select(opr_rnd, opr_fctr, c2c_pct), 
  aes(x = opr_fctr, y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = opr_fctr), 
    alpha = 0.7,
    show.legend = FALSE,
    na.rm = TRUE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = opr_fctr), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75,
    na.rm = TRUE) +
  #scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    subtitle = "Distribution (%) of Returns by Open Price as % of Prev. Range", 
    x = NULL, 
    y = NULL, 
    color = NULL) +
  scale_color_manual(values = fills) +
  theme_hc() + 
  guides(fill = guide_legend(ncol = 7, byrow = TRUE))

prev_rng_cnt / prev_rng_sum / prev_rng_distr / guide_area() + 
  plot_layout(guides = "collect", heights = c(2, 2, 4 ,1))
```

```{r}
# Candlestick Chart -----

#' @rdname geom_chart
#' @export
geom_candlestick <- function(
    mapping = NULL, data = NULL, stat = "identity",
    position = "identity", na.rm = TRUE, show.legend = NA,
    inherit.aes = TRUE,
    colour_up = "darkblue", colour_down = "red",
    fill_up = "darkblue", fill_down = "red",
    ...) {

    linerange <- ggplot2::layer(
        stat = StatLinerangeBC, 
        geom = GeomLinerangeBC, 
        data = data, 
        mapping = mapping,
        position = position, 
        show.legend = show.legend, 
        inherit.aes = inherit.aes,
        params = list(na.rm = na.rm, fill_up = fill_up, fill_down = fill_down,
          colour_up = colour_up, colour_down = colour_down, ...)
    )

    rect <- ggplot2::layer(
        stat = StatRectCS, geom = GeomRectCS, data = data, mapping = mapping,
        position = position, show.legend = show.legend, inherit.aes = inherit.aes,
        params = list(na.rm = na.rm, fill_up = fill_up, fill_down = fill_down,
                      colour_up = colour_up, colour_down = colour_down, ...)
    )

    list(linerange, rect)
}

GeomLinerangeBC <- ggplot2::ggproto(
  "GeomLinerangeBC", 
  ggplot2::GeomLinerange,
  default_aes = ggplot2::aes(
    linewidth = 0.5,
    linetype = 1,
    alpha = NA))

StatLinerangeBC <- ggplot2::ggproto(
  "StatLinerangeBC", 
  ggplot2::Stat,
  required_aes = c("x", "open", "high", "low", "close"),
  dropped_aes = c("open", "high", "low", "close", "y"),
  compute_group = function(
    data, scales, params,
    fill_up, fill_down,
    colour_up, colour_down) {
  
      data <-  data %>%
          dplyr::mutate(color = ifelse(open < close, colour_up, colour_down))
  
      tibble::tibble(
        x = data$x,
        ymin = data$low,
        ymax = data$high,
        colour = data$color)
  })

StatRectCS <- ggplot2::ggproto(
  "StatRectCS", 
  ggplot2::Stat,
  required_aes = c("x", "open", "high", "low", "close"),
  dropped_aes = c("open", "high", "low", "close", "x", "y"),
  compute_group = function(data, scales, params,
     fill_up, fill_down,
     colour_up, colour_down) {
  
        data <-  data %>%
          dplyr::mutate(
            fill = ifelse(open < close, fill_up, fill_down),
            ymin = ifelse(open < close, open, close),
            ymax = ifelse(open < close, close, open))
    
        tibble::tibble(
          xmin = data$x - 0.45,
          xmax = data$x + 0.45,
          ymin = data$ymin,
          ymax = data$ymax,
          fill = data$fill)
  })

GeomRectCS <- ggplot2::ggproto(
  "GeomRectCS", 
  ggplot2::GeomRect,
  default_aes = ggplot2::aes(
    colour = NA,
    linewidth = 0.5,
    linetype = 1,
    alpha = NA))
```

```{r}
#https://stackoverflow.com/questions/72246317/can-i-choose-the-fill-based-on-the-color
#ggplot(d, 
#  aes(x, y, color = category, 
#    fill = stage(p, 
#      after_scale = ifelse(fill == "white", fill, color)))) + 
#  geom_point(shape = "circle filled") + 
#  scale_fill_manual(values = c("TRUE" = "white", "FALSE" = "black"))

daySubset |>
  mutate(condition = ifelse(close == 204.97, TRUE, FALSE))
```

```{r}
#myCandle <- function(x, open, high, low, close, ...) {
#  geom_linerange(aes(x = x, ymin = ifelse(close > open, close, open), ymax = high))
#}

ggplot(daySubset |> mutate(condition = ifelse(close == 204.97 | close == 201.99, TRUE, FALSE)),
       aes(x = dt, y = close)) +
  geom_linerange(#data = daySubset, 
    mapping = aes(x = dt, ymin = ifelse(close > open, close, open), ymax = high, color = condition)) +
  geom_rect(#data = daySubset, 
    mapping = aes(
      xmin = dt - 0.3, 
      xmax = dt + 0.3, 
      ymin = ifelse(close > open, open, close), 
      ymax = ifelse(close > open, close, open),
      alpha = ifelse(close > open, "up", "down"),
      color = condition,
      fill = after_scale(color))#, 
    #color = "black",
    #fill = "black"
    ) +
  geom_linerange(#data = daySubset, 
    mapping = aes(x = dt, ymin = low, ymax = ifelse(close > open, open, close), color = condition)) +
  scale_alpha_discrete(range = c(1, 0), guide = "none") +
  scale_color_manual(values = c("black", "orange")) +
  theme_bw() +
  labs(title = "Candlestick Example", color = "Condition")
  #myCandle(x = dt, open = open, high = high, low = low, close = close)
```

```{r}
geom_candle <- function(
    x = NULL, 
    o = NULL, 
    h = NULL, 
    l = NULL, 
    c = NULL, 
    bodyWidth = 0.3, 
    ...) {
  list(
    geom_linerange(
      mapping = aes(
        x = {{ x }},
        ymin = ifelse({{ c }} > {{ o }}, {{ c }}, {{ o }}),
        ymax = {{ h }},
        ...
      )
    ),
    geom_rect(
      mapping = aes(
        xmin = {{ x }} - {{ bodyWidth}},
        xmax = {{ x }} + {{ bodyWidth}},
        ymin = ifelse({{ c }} > {{ o }}, {{ o }}, {{ c }}),
        ymax = ifelse({{ c }} > {{ o }}, {{ c }}, {{ o }}),
        alpha = ifelse({{ c }} > {{ o }}, "up", "down"),
        fill = after_scale(color),
        ...
      )
    ),
    geom_linerange(
      mapping = aes(
        x = {{ x }},
        ymin = {{ l }},
        ymax = ifelse({{ c }} > {{ o }}, {{ o }}, {{ c }}),
        ...
      )
    ),
    scale_alpha_discrete(range = combine(1, 0), guide = "none")
  )
}
```

```{r}
ggplot(daySubset |> 
  mutate(condition = ifelse(
    close == 204.97 | close == 201.99, TRUE, FALSE
  )
),
  aes(x = dt, y = close)) +
  geom_candle(
    x = dt, o = open, h = high, l = low, c = close,
    color = condition
  ) +
  scale_color_manual(values = c("black", "orange")) +
  theme_bw() +
  labs(title = "Candle Function Test", color = "Condition")
```

```{r}
#daySubset <- dbGetQuery(con,
#  "SELECT * FROM spy_1d_adj WHERE dt BETWEEN '2015-01-15' AND '2015-01-30'")

ggplot(daySubset,
       aes(x = dt, y = close)) +
  geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
  labs(title = "Candle Test", y = "Closing Price", x = "") +
  theme_bw()
```

```{r}
fedMtgs <- dbGetQuery(
  con,
  "-- Fed Meetings
WITH fed_mtg_cte AS	(
	SELECT ROW_NUMBER() OVER() AS mtg_nbr, start_dt, end_dt
	FROM main.fomc_dates
	WHERE start_dt > '1993-01-29' AND end_dt < '2024-01-01'
), norm_spy_1d_cte AS (
	SELECT ROW_NUMBER()OVER() AS row_num, dt, open, high, low, close
	FROM main.spy_1d_adj
), norm_fed_mtg_cte AS (
	SELECT m.*, sd.row_num AS start_row, ed.row_num AS end_row
	FROM fed_mtg_cte m
		LEFT JOIN norm_spy_1d_cte sd ON m.start_dt = sd.dt
		LEFT JOIN norm_spy_1d_cte ed ON m.end_dt = ed.dt
)
	SELECT m.mtg_nbr, m.start_dt, m.end_dt, m.start_row, m.end_row, d.row_num, 
		CASE WHEN end_row > start_row AND row_num == end_row THEN 0.5
			WHEN row_num <= start_row THEN row_num - first_value(start_row) OVER(PARTITION BY mtg_nbr) 
			ELSE row_num - last_value(end_row) OVER(PARTITION BY mtg_nbr) END AS mtg_dt_offset,
		d.dt, d.open, d.high, d.low, d.close, 
		s.chg, s.yr_dir, s.yr_pct 
	FROM norm_fed_mtg_cte m
		JOIN norm_spy_1d_cte d ON d.row_num BETWEEN m.start_row -1 AND m.end_row + 1
		JOIN main.spy_1d_agg_stats s ON d.dt = s.dt
	ORDER BY d.dt;")
```

```{r}
ggplot(fedMtgs |> 
  dplyr::filter(lubridate::year(dt) %in% c(2020)) |>
  mutate(condition = ifelse(
    dplyr::between(mtg_dt_offset, 0, 0.5), TRUE, FALSE
  )
),
  aes(x = dt, y = close)) +
  geom_candle(
    x = dt, o = open, h = high, l = low, c = close,
    color = condition
  ) +
  scale_color_manual(values = c("black", "orange")) +
  theme_bw() +
  labs(title = "Fed Meetings", color = "Mtg Days") +
  facet_wrap(~mtg_nbr, scales = "free")
```

```{r}
fedMtgs |>
  dplyr::filter(lubridate::year(dt) %in% c(2018)) |>
  mutate(condition = ifelse(
    dplyr::between(mtg_dt_offset, 0, 1), TRUE, FALSE)
  )
```

```{r}
bt_tst <- result |>
  filter(year(dt) %in% c(2000:2020)) |>
  mutate(rn = row_number(),
         mth_nbr = month(dt),
         trd_entry = ifelse((mth_nbr == 11 | (mth_nbr == 1 & rn == 1)), 1, 0),
         trd_exit = ifelse(mth_nbr == 8, 1, 0),
         pos_size = 0,
         pos_val = 0,
         cash = 0,
         eqty = 0,
         eqty_l = 0,
         eqty_h = 0) |>
  select(
    dt, open, high, low, close, rn, mth_nbr, 
    trd_entry, trd_exit, pos_size, pos_val, cash,
    eqty, eqty_l, eqty_h)
```

```{r}
init_eqty <- 10000

bt_tst2 <- bt_tst
trd_entry_vec <- as.numeric(bt_tst2$trd_entry)
trd_exit_vec <- as.numeric(bt_tst2$trd_exit)
pos_size_vec <- as.numeric(bt_tst2$pos_size)
pos_val_vec <- as.numeric(bt_tst2$pos_val)
cash_vec <- as.numeric(bt_tst2$cash)
eqty_vec <- as.numeric(bt_tst2$eqty)
eqty_low_vec <- as.numeric(bt_tst2$eqty_l)
eqty_high_vec <- as.numeric(bt_tst2$eqty_h)
open_vec <- as.numeric(bt_tst2$open)
close_vec <- as.numeric(bt_tst2$close)
low_vec <- as.numeric(bt_tst2$low)
high_vec <- as.numeric(bt_tst2$high)

for (i in seq_along(bt_tst2$dt)) {
  f_row <- i == 1
  entry <- as.logical(trd_entry_vec[i])
  exit <- as.logical(trd_exit_vec[i])
  
  if (f_row & entry) {
    pos_size_vec[i] <- round(init_eqty / open_vec[i], 2)
    cash_vec[i] <- 0
  } else if (f_row & !entry) {
    pos_size_vec[i] <- 0
    cash_vec[i] <- init_eqty
  } else if (entry) {
    pos_size_vec[i] <- round(cash_vec[i - 1] / open_vec[i], 2)
    cash_vec[i] <- 0
  } else if (exit) {
    pos_size_vec[i] <- 0
    cash_vec[i] <- round(pos_size_vec[i - 1] * open_vec[i], 2)
  } else {
    pos_size_vec[i] <- pos_size_vec[i - 1]
    cash_vec[i] <- cash_vec[i - 1]
  }
  
  pos_val_vec[i] <- round(pos_size_vec[i] * close_vec[i], 2)
  eqty_vec[i] <- cash_vec[i] + pos_val_vec[i]
  eqty_low_vec[i] <- round(cash_vec[i] + (pos_size_vec[i] * low_vec[i]), 2)
  eqty_high_vec[i] <- round(cash_vec[i] + (pos_size_vec[i] * high_vec[i]), 2)
}

bt_data <- bt_tst2 |>
  select(-c(pos_size, pos_val, cash, eqty, eqty_l, eqty_h)) |>
  add_column(pos_size = pos_size_vec,
             pos_val = pos_val_vec,
             cash = cash_vec,
             eqty = eqty_vec,
             eqty_l = eqty_low_vec,
             eqty_h = eqty_high_vec,
             .after = "trd_exit") |>
  mutate(mth_nbr = month(dt),
         drawdn = round(log(eqty / slide_max(eqty, before=Inf)), 4),
         pos_type = case_when(pos_size > 0 ~ "LONG",
                              pos_size < 0 ~ "SHORT",
                              .default = "FLAT"),
         trd_num = slide_sum(trd_entry, before=Inf)) |>
  group_by(trd_num) |>
  mutate(is_closed = max(trd_exit),
         trd_length = row_number(),
         trd_drawdn = round(log(eqty / slide_max(eqty, before=Inf)), 4),
         trd_ur_drawdn = round(log(eqty_l / slide_max(eqty_h, before=Inf)), 4),
         trd_base = round(first(open) * first(pos_size), 2)) |>
  ungroup() |>
  mutate(trd_num = if_else(pos_size == 0, NA, trd_num),
         trd_length = if_else(pos_size == 0, NA, trd_length),
         trd_drawdn = if_else(pos_size == 0, NA, trd_drawdn),
         trd_ur_drawdn = if_else(pos_size == 0, NA, trd_ur_drawdn),
         trd_base = if_else(pos_size == 0, NA, trd_base),
         pct_chg = round(
           if_else(rn == 1, log(eqty/init_eqty), log(eqty/lag(eqty))),
           4)
         )

rm(trd_entry_vec, trd_exit_vec, pos_size_vec, pos_val_vec,
   cash_vec, eqty_vec, eqty_low_vec, eqty_high_vec,
   open_vec, close_vec, low_vec, high_vec)

bt_data
```

```{r}
print(paste0("all months: ", as.character(nrow(bt_data))))
print(paste0("posn months: ", as.character(nrow(bt_data |> drop_na()))))
time_in_mkt_val <- nrow(bt_data |> drop_na()) / nrow(bt_data)
print(paste0("pct time in market: ", as.character(time_in_mkt)))

bt_trd_data <- bt_data |>
  drop_na() |>
  group_by(trd_num) |>
  summarise(trd_type = first(pos_type),
            trd_rslt = case_when(
              last(is_closed) == 1 & last(eqty) - first(trd_base) > 0 ~ "Winner",
              last(is_closed) == 1 & last(eqty) - first(trd_base) <= 0 ~ "Loser",
              .default = "Open"),
            ttl_trd_len = max(trd_length),
            trd_pnl = last(eqty) - first(trd_base),
            trd_pnl_pct = round(log(last(eqty) / first(trd_base)), 4),
            max_trd_drawdn = min(trd_drawdn),
            max_ur_drawdn = min(trd_ur_drawdn)) |>
  mutate(wl_seq = dense_rank(trd_rslt) |> consecutive_id()) |>
  group_by(wl_seq) |>
  mutate(consec_win_loss = if_else(trd_rslt == "Open", NA, seq_along(wl_seq)),
         .after = trd_rslt) |>
  ungroup() |>
  select(-wl_seq)

bt_trd_data
```

```{r}
bt_winloss_data <- bt_trd_data |>
  filter(trd_rslt != "Open") |>
  group_by(trd_rslt) |>
  summarise(trd_cnt = n(),
            gross_pnl = sum(trd_pnl),
            max_win_loss = if_else(
              first(trd_rslt) == "Winner",
              max(trd_pnl),
              min(trd_pnl)),
            max_consec_win_loss = max(consec_win_loss),
            avg_pnl = mean(trd_pnl, na.rm = TRUE),
            avg_length = mean(ttl_trd_len, na.rm = TRUE)
            )
```

```{r}
bt_totals_data <- bt_trd_data |>
  filter(trd_rslt != "Open") |>
  summarise(summary = "Totals",
            trd_cnt = n(),
            pct_profitable = sum(ifelse(trd_rslt == "Winner", 1, 0)) / n(),
            net_profit = sum(trd_pnl),
            avg_pnl = mean(trd_pnl, na.rm = TRUE),
            avg_win_loss_ratio = 
              mean(ifelse(trd_rslt == "Winner", trd_pnl, NA), na.rm = TRUE) /
              abs(mean(ifelse(trd_rslt == "Loser", trd_pnl, NA), na.rm = TRUE)),
            profit_factor = 
              sum(ifelse(trd_rslt == "Winner", 1, 0)) / 
              sum(ifelse(trd_rslt == "Loser", 1, 0)),
            rlzd_roa_pct = sum(trd_pnl_pct),
            ttl_roa_pct = sum(bt_trd_data$trd_pnl_pct),
            max_trd_drawdn_pct = min(max_trd_drawdn),
            max_cum_drawdn_pct = min(bt_data$drawdn))
```

```{r}
bt_yrly_data <- bt_data |>
  mutate(yr = year(dt),
         prev_eqty = lag(eqty)) |>
  group_by(yr) |>
  summarise(st_eqty = if_else(is.na(first(prev_eqty)),
                              init_eqty,
                              first(prev_eqty)),
            end_eqty = last(eqty),
            max_yr_drawdn = min(drawdn))
```

```{r}
cagr_func <- function(st_eqty, end_eqty, num_yrs) 
{
  ((end_eqty / st_eqty) ^ (1 / num_yrs)) - 1
}
max_dd_func <- function(dd_vctr)
{
  abs(min(dd_vctr))
}
mar_func <- function(cagr, max_dd)
{
  cagr / max_dd
}
sharp_func <- function(pnl_vctr)
{
  mean(pnl_vctr) / sd(pnl_vctr)
}
anlzd_sharp_func <- function(pnl_vctr, anlzd_scale = 12)
{
  sqrt(anlzd_scale) * (mean(pnl_vctr) / sd(pnl_vctr))
}
```

```{r}
cagr_val <- round(
  cagr_func(
    dplyr::first(bt_yrly_data$st_eqty),
    dplyr::last(bt_yrly_data$end_eqty),
    nrow(bt_yrly_data)),
  4)

mar_val <- round(
  mar_func(
    cagr_val,
    max_dd_func(bt_yrly_data$max_yr_drawdn)),
  3)

bt_yrly_tail_data <- dplyr::slice_tail(bt_yrly_data, n = 3)
calmar_val <- round(
  mar_func(
    cagr_func(
      dplyr::first(bt_yrly_tail_data$st_eqty),
      dplyr::last(bt_yrly_tail_data$end_eqty),
      nrow(bt_yrly_tail_data)),
    max_dd_func(bt_yrly_tail_data$max_yr_drawdn)),
  3)

sharp_val <- round(sharp_func(bt_trd_data$trd_pnl), 3)

anlzd_sharp_val <- round(anlzd_sharp_func(bt_data$pct_chg, 12), 3)
```

```{r}
bt_metrics <- list(
  data_series = bt_data,
  data_trd = bt_trd_data,
  data_yrly = bt_yrly_data,
  data_winloss = bt_winloss_data,
  data_totals = bt_totals_data,
  calc_time_in_mkt = time_in_mkt_val,
  calc_cagr = cagr_val,
  calc_mar = mar_val,
  calc_calmar = calmar_val,
  calc_sharp = sharp_val,
  calc_anlzd_sharp = anlzd_sharp_val
)

bt_metrics
```

```{r}
print(glue(
  "Percent of Time in market: {scales::label_percent(0.01)(pct)}",
  pct = bt_metrics$calc_time_in_mkt))
print(glue(
  "CAGR: {scales::label_percent(0.01)(cagr)}",
  cagr = bt_metrics$calc_cagr))
print(glue("MAR: {bt_metrics$calc_mar}"))
print(glue("CALMAR: {bt_metrics$calc_calmar}"))
print(glue("Sharp: {bt_metrics$calc_sharp}"))
print(glue("Annualized Sharp: {bt_metrics$calc_anlzd_sharp}"))
```

```{r}
# bt_tst2 <- bt_tst |> 
#   split(row(bt_tst)[, 1])
# 
# purrr::map2(
#   bt_tst2,
#   seq_along(bt_tst2),
#   \(.x, .y)
#   {
#     p <- as.integer(.y - 1)
#     .x$tst_1 = ifelse(.y > 1, bt_tst2[[p]]$rn, NA)
#     .x$tst_2 = ifelse(.y > 1, .x$tst_1 + 10, NA)
# 
#     return(as.tibble(.x))
#   }) |>
#   dplyr::bind_rows()
```

```{r}
dbDisconnect(con, shutdown=TRUE)
```

```{r}
library(dlookr)
```

```{r}
data("managers")
#head(managers[,1,drop=FALSE])
#head(managers)
PerformanceAnalytics::SharpeRatio(
  managers[,1,drop=FALSE], 
  Rf = .35/12, 
  FUN = "StdDev")
```

```{r}
library(gt)
library(tidyverse)
library(glue)

# Define the start and end dates for the data range
start_date <- "2010-06-07"
end_date <- "2010-06-14"

# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
  dplyr::filter(date >= start_date & date <= end_date) %>%
  dplyr::select(-adj_close) %>%
  gt() %>%
  tab_header(
    title = "S&P 500",
    subtitle = glue::glue("{start_date} to {end_date}")
  ) %>%
  fmt_date(
    columns = vars(date),
    date_style = 3
  ) %>%
  fmt_currency(
    columns = vars(open, high, low, close),
    currency = "USD"
  ) %>%
  fmt_number(
    columns = vars(volume),
    suffixing = TRUE
  )
```
