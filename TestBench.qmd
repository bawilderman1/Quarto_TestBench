---
title: "TestBench"
author: "Brent Wilderman"
date: "6/08/2024"
format: 
  html:
    code-fold: true
execute:
  echo: false
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
library(conflicted)
library(tidyverse)
library(DBI)
library(duckdb)
library(MASS)
library(ggiraph)
library(scales)
library(ggthemes)
library(lubridate)
library(patchwork)
filter <- dplyr::filter
lag <- dplyr::lag
select <- dplyr::select
```

```{r}
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/bawil/Documents/StockData/Databases/spyanalysis.db", read_only = FALSE)
```

```{r}
result <- dbGetQuery(
  con,
  "SELECT m.*, 
  	hl.* EXCLUDE (dt),
  	cd.* EXCLUDE (dt),
  	d.* EXCLUDE (dt),
  	ga.* EXCLUDE (dt),
  	sp.* EXCLUDE (dt),
  	fc.* EXCLUDE (dt),
  FROM spy_monthly m
  	LEFT JOIN spy_monthly_highlow hl ON m.dt = hl.dt
  	LEFT JOIN spy_monthly_consec_dir cd ON m.dt = cd.dt
  	LEFT JOIN spy_monthly_decycler125 d ON m.dt = d.dt
  	LEFT JOIN spy_monthly_geomavg5 ga ON m.dt = ga.dt
  	LEFT JOIN spy_monthly_augenspikes sp ON m.dt = sp.dt
  	LEFT JOIN spy_monthly_factorcalcs fc ON m.dt = fc.dt
  ORDER BY m.dt;")
```

```{r}
glimpse(result)
```

```{r}
dec_slope_qtiles <- quantile(result$decycler_slope, na.rm = TRUE)

dec_slope_iqr <- dec_slope_qtiles["75%"] - dec_slope_qtiles["25%"]

#dec_slope_loutlier <- dec_slope_qtiles["25%"] - (1.5 * dec_slope_iqr)
#dec_slope_uoutlier <- dec_slope_qtiles["75%"] + (1.5 * dec_slope_iqr)
```

```{r}
fmt_result <- result |>
  mutate(
    dec_slope_lqt = dec_slope_qtiles["25%"],
    dec_slope_mdn = dec_slope_qtiles["50%"],
    dec_slope_uqt = dec_slope_qtiles["75%"],
    month = factor(format(result$dt, "%b"), month.abb, ordered = TRUE),
    tt_label = glue::glue(
      "Month: {format(dt, '%b, %Y')}\n",
      "Change: {percent(c2c_pct, accuracy = 0.01)}\n",
      "Slope: {percent(decycler_slope, accuracy = 0.01)}")
  ) |>
  dplyr::select(dt, mth_nm, c2c_pct, decycler_slope, dec_slope_lqt, dec_slope_mdn, dec_slope_uqt, month, tt_label)
```

```{r}
#tcm <- ggthemes_data$tableau$`color-palettes`$regular$`Classic Cyclic`
#tcm
tcc12 <- ggthemes_data$tableau$`color-palettes`$regular$`Classic Cyclic` |> dplyr::slice(1:12) |> pull(value)

names(tcc12) <- c(levels(fmt_result$month))
tcc12
```

### Comparisons

@fig-comparisons Decycler slope's effect on monthly return.

```{r}
#| label: fig-comparisons
#| fig-cap: "Decycler Slope vs Return Percent."
#| warning: false

test_plot <- ggplot(fmt_result, aes(c2c_pct, decycler_slope, colour = month)) + 
  geom_point_interactive(aes(tooltip = tt_label, `data-id` = month), extra_interactive_params = "data-id") +
  geom_vline(aes(xintercept = 0.0), color = "black") +
  geom_hline(aes(yintercept = dec_slope_mdn), color = "black", alpha = 0.75) +
  geom_hline(aes(yintercept = dec_slope_lqt), color = "black", alpha = 0.5, linetype = "dashed") +
  geom_hline(aes(yintercept = dec_slope_uqt), color = "black", alpha = 0.5, linetype = "dashed") +
  labs(title = "Log Decyler Slope % vs. Log Price Chance %",
       subtitle = "box plot overlayed for decycler slope") +
  guides(color = guide_legend(title = "Month")) +
  theme_bw() +
  #scale_color_tableau(palette = "Classic Cyclic")
  scale_color_manual_interactive(values = tcc12, extra_interactive_params = "data-id", `data-id` = unique(fmt_result$month), data_id = function(breaks) as.character(breaks))

girafe(ggobj = test_plot,
  options = list(
    opts_sizing(rescale = TRUE),
    opts_toolbar(saveaspng = FALSE),
    opts_zoom(min = 0.5, max = 4),
    opts_hover(css = ''),
    opts_hover_inv(css = "opacity:0.1;"), 
    #opts_hover_key(css = ''),
    opts_sizing(rescale = FALSE),
    opts_tooltip(
      css = htmltools::css(
        background = 'darkslategrey',
        border = '1px solid darkslategrey;',
        padding = '5px',
        font_weight = 600
      )
    )
  )#,
  #height_svg = 4,
  #width_svg = 6
)
```

```{r}
ggplot(result, aes(x = factor(yr_dir), y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = factor(yr_dir)), 
    alpha = 0.7,
    show.legend = FALSE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = factor(yr_dir)), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75) +
  theme_bw() +
  scale_color_tableau(palette = "Classic 10")
```

```{r}
decades <- result |>
  mutate(
    month = factor(format(result$dt, "%b"), month.abb, ordered = TRUE),
    year = year(dt),
    yr = factor(format(result$dt, '%Y'), unique(year(dt)), ordered = TRUE),
    decade = glue::glue("{format(dt - years((year(dt) %% 10)), '%Y')}'s"),
  ) |>
  dplyr::select(dt, ytd_pct, month, year, yr, decade)

ggplot(decades, aes(month, ytd_pct, group = yr)) +
  geom_line(aes(color = yr)) +
  facet_wrap(~decade, ncol = 1)
```

### YTD Returns by Decade

Annual Percentage Returns.

```{r, message=FALSE, results='hide', echo=FALSE}
#| warning: false

# TODO: make custom color scheme for 10 variables
decades_split <- decades |>
  nest(.by = decade) |>
  mutate(plot = map2(decade, data,  function (.x,.y) {
    ggplot(data = .y, aes(x =  month, y = ytd_pct, group = yr)) +
      geom_line(aes(color = yr)) +
      geom_hline(aes(yintercept = 0), color = "black", alpha = 0.5, linetype = "dashed") +
      theme_bw() +
      scale_color_tableau(palette = "Classic Cyclic") +
      ggtitle(label = .x) +
      scale_y_continuous(labels = scales::percent_format()) +
      labs(x = NULL, y = "YTD %", color = NULL)
      #+ theme(aspect.ratio=1/4)
  }))

#decades_split$plot[[1]] / decades_split$plot[[2]] / decades_split$plot[[3]] + plot_layout(axis_titles = "collect", heights = c(4, 4, 4))
#print(decades_split$plot)
decades_split$plot
```

```{r}
annual_high_low <- result |>
  filter(high_row == 1 | low_row == 1) |>
  mutate(
    month = factor(format(dt, "%b"), month.abb, ordered = TRUE),
    high_low = factor(ifelse(high_row == 1, "High", "Low"), levels = c("Low", "High")),
    yr_up_down = factor(ifelse(yr_dir == 1, "Up", "Down"), levels = c("Up", "Down"))
  ) |>
  select(dt, month, yr_up_down, high_low)

#high_low_colors <- brewer_pal(3, "Set1")

ggplot(annual_high_low, aes(month)) +
  geom_bar(aes(fill = high_low)) +
  scale_fill_manual(values = c("#E41A1C", "#4DAF4A")) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    legend.position = "bottom",
    strip.background=element_rect(colour="black", fill="white")) +
  labs(
    title = "Count of Lows & Highs by Month",
    subtitle = "Up vs. Down Years",
    x = NULL, 
    y = NULL, 
    fill = NULL) +
  facet_grid(yr_up_down ~ high_low, scales = "free_y")
```

```{r}
dbDisconnect(con, shutdown=TRUE)
```

```{r}
library(dlookr)
```

```{r}
library(gt)
library(tidyverse)
library(glue)

# Define the start and end dates for the data range
start_date <- "2010-06-07"
end_date <- "2010-06-14"

# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
  dplyr::filter(date >= start_date & date <= end_date) %>%
  dplyr::select(-adj_close) %>%
  gt() %>%
  tab_header(
    title = "S&P 500",
    subtitle = glue::glue("{start_date} to {end_date}")
  ) %>%
  fmt_date(
    columns = vars(date),
    date_style = 3
  ) %>%
  fmt_currency(
    columns = vars(open, high, low, close),
    currency = "USD"
  ) %>%
  fmt_number(
    columns = vars(volume),
    suffixing = TRUE
  )
```
