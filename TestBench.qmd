---
title: "TestBench"
author: "Brent Wilderman"
date: "6/08/2024"
format: 
  html:
    code-fold: true
execute:
  echo: false
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
library(conflicted)
library(tidyverse)
library(DBI)
library(duckdb)
library(MASS)
library(ggiraph)
library(scales)
library(ggthemes)
library(lubridate)
library(patchwork)
library(RColorBrewer)
library(PerformanceAnalytics)
library(slider)
library(tsbox)
library(purrr)
library(glue)
library(gt)
library(highcharter)
library(quantmod)
library(Rcpp)
filter <- dplyr::filter
lag <- dplyr::lag
select <- dplyr::select
first <- dplyr::first
last <- dplyr::last
area <- patchwork::area
```

```{r}
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/bawil/Documents/StockData/Databases/spyanalysis.db", read_only = FALSE)
```

```{r}
result <- dbGetQuery(
  con,
  "WITH spy_dividend_cte AS (
  	SELECT 
  		time_bucket(to_months(1), dt) as dt,
  		max(dividend) AS dividend,
  	FROM spy_1d_dividends
  	where dt >= '1993-02-01'
  	group by time_bucket(to_months(1), dt)
  	order by time_bucket(to_months(1), dt)
  )
  SELECT m.*, 
  	hl.* EXCLUDE (dt),
  	cd.* EXCLUDE (dt),
  	d.* EXCLUDE (dt),
  	ga.* EXCLUDE (dt),
  	sp.* EXCLUDE (dt),
  	fc.* EXCLUDE (dt),
  	div.* EXCLUDE(dt),
  FROM spy_monthly m
  	LEFT JOIN spy_monthly_highlow hl ON m.dt = hl.dt
  	LEFT JOIN spy_monthly_consec_dir cd ON m.dt = cd.dt
  	LEFT JOIN spy_monthly_decycler125 d ON m.dt = d.dt
  	LEFT JOIN spy_monthly_geomavg5 ga ON m.dt = ga.dt
  	LEFT JOIN spy_monthly_augenspikes sp ON m.dt = sp.dt
  	LEFT JOIN spy_monthly_factorcalcs fc ON m.dt = fc.dt
  	LEFT JOIN spy_dividend_cte div ON m.dt = div.dt
  ORDER BY m.dt;")
```

```{r}
glimpse(result)
```

```{r}
dec_slope_qtiles <- quantile(result$decycler_slope, na.rm = TRUE)

dec_slope_iqr <- dec_slope_qtiles["75%"] - dec_slope_qtiles["25%"]

#dec_slope_loutlier <- dec_slope_qtiles["25%"] - (1.5 * dec_slope_iqr)
#dec_slope_uoutlier <- dec_slope_qtiles["75%"] + (1.5 * dec_slope_iqr)
```

```{r}
fmt_result <- result |>
  mutate(
    dec_slope_lqt = dec_slope_qtiles["25%"],
    dec_slope_mdn = dec_slope_qtiles["50%"],
    dec_slope_uqt = dec_slope_qtiles["75%"],
    month = factor(format(result$dt, "%b"), month.abb, ordered = TRUE),
    tt_label = glue::glue(
      "Month: {format(dt, '%b, %Y')}\n",
      "Change: {percent(c2c_pct, accuracy = 0.01)}\n",
      "Slope: {percent(decycler_slope, accuracy = 0.01)}")
  ) |>
  dplyr::select(dt, mth_nm, c2c_pct, decycler_slope, dec_slope_lqt, dec_slope_mdn, dec_slope_uqt, month, tt_label)
```

```{r}
#tcm <- ggthemes_data$tableau$`color-palettes`$regular$`Classic Cyclic`
#tcm
tcc12 <- ggthemes_data$tableau$`color-palettes`$regular$`Classic Cyclic` |> dplyr::slice(1:12) |> pull(value)

names(tcc12) <- c(levels(fmt_result$month))
tcc12
```

### Comparisons

@fig-comparisons Decycler slope's effect on monthly return.

```{r}
#| label: fig-comparisons
#| fig-cap: "Decycler Slope vs Return Percent."
#| warning: false

test_plot <- ggplot(fmt_result, aes(c2c_pct, decycler_slope, colour = month)) + 
  geom_point_interactive(aes(tooltip = tt_label, `data-id` = month), extra_interactive_params = "data-id") +
  geom_vline(aes(xintercept = 0.0), color = "black") +
  geom_hline(aes(yintercept = dec_slope_mdn), color = "black", alpha = 0.75) +
  geom_hline(aes(yintercept = dec_slope_lqt), color = "black", alpha = 0.5, linetype = "dashed") +
  geom_hline(aes(yintercept = dec_slope_uqt), color = "black", alpha = 0.5, linetype = "dashed") +
  labs(title = "Log Decyler Slope % vs. Log Price Chance %",
       subtitle = "box plot overlayed for decycler slope") +
  guides(color = guide_legend(title = "Month")) +
  theme_bw() +
  #scale_color_tableau(palette = "Classic Cyclic")
  scale_color_manual_interactive(values = tcc12, extra_interactive_params = "data-id", `data-id` = unique(fmt_result$month), data_id = function(breaks) as.character(breaks))

girafe(ggobj = test_plot,
  options = list(
    opts_sizing(rescale = TRUE),
    opts_toolbar(saveaspng = FALSE),
    opts_zoom(min = 0.5, max = 4),
    opts_hover(css = ''),
    opts_hover_inv(css = "opacity:0.1;"), 
    #opts_hover_key(css = ''),
    opts_sizing(rescale = FALSE),
    opts_tooltip(
      css = htmltools::css(
        background = 'darkslategrey',
        border = '1px solid darkslategrey;',
        padding = '5px',
        font_weight = 600
      )
    )
  )#,
  #height_svg = 4,
  #width_svg = 6
)
```

```{r}
ggplot(result, aes(x = factor(yr_dir), y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = factor(yr_dir)), 
    alpha = 0.7,
    show.legend = FALSE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = factor(yr_dir)), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75) +
  theme_bw() +
  scale_color_tableau(palette = "Classic 10")
```

```{r}
#| fig-width: 10
#| fig-height: 20
decades <- result |>
  mutate(
    month = factor(format(result$dt, "%b"), month.abb, ordered = TRUE),
    year = year(dt),
    yr = factor(format(result$dt, '%Y'), unique(year(dt)), ordered = TRUE),
    decade = glue::glue("{format(dt - years((year(dt) %% 10)), '%Y')}'s"),
  ) |>
  dplyr::select(dt, ytd_pct, month, year, yr, decade)

ggplot(decades, aes(month, ytd_pct, group = yr)) +
  geom_line(aes(color = yr)) +
  geom_hline(aes(yintercept = 0), color = "black", alpha = 0.5, linetype = "dashed") +
  theme_bw() +
  facet_wrap(~decade, ncol = 1, scales = "free_y")
```

### YTD Returns by Decade

Annual Percentage Returns.

```{r, message=FALSE, results='hide', echo=FALSE}
#| warning: false

# TODO: make custom color scheme for 10 variables
decades_split <- decades |>
  nest(.by = decade) |>
  mutate(plot = map2(decade, data,  function (.x,.y) {
    ggplot(data = .y, aes(x =  month, y = ytd_pct, group = yr)) +
      geom_line(aes(color = yr)) +
      geom_hline(aes(yintercept = 0), color = "black", alpha = 0.5, linetype = "dashed") +
      theme_bw() +
      scale_color_tableau(palette = "Classic Cyclic") +
      ggtitle(label = .x) +
      scale_y_continuous(labels = scales::percent_format()) +
      labs(x = NULL, y = "YTD %", color = NULL)
      #+ theme(aspect.ratio=1/4)
  }))

#decades_split$plot[[1]] / decades_split$plot[[2]] / decades_split$plot[[3]] + plot_layout(axis_titles = "collect", heights = c(4, 4, 4))
#print(decades_split$plot)
decades_split$plot
```

```{r}
annual_high_low <- result |>
  filter(high_row == 1 | low_row == 1) |>
  mutate(
    month = factor(format(dt, "%b"), month.abb, ordered = TRUE),
    high_low = factor(ifelse(high_row == 1, "High", "Low"), levels = c("Low", "High")),
    yr_up_down = factor(ifelse(yr_dir == 1, "Up", "Down"), levels = c("Up", "Down"))
  ) |>
  select(dt, month, yr_up_down, high_low)

#high_low_colors <- brewer_pal(3, "Set1")

ggplot(annual_high_low, aes(month)) +
  geom_bar(aes(fill = high_low)) +
  scale_fill_manual(values = c("#E41A1C", "#4DAF4A")) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    legend.position = "bottom",
    strip.background=element_rect(colour="black", fill="white")) +
  labs(
    title = "Count of Lows & Highs by Month",
    subtitle = "Up vs. Down Years",
    x = NULL, 
    y = NULL, 
    fill = NULL) +
  facet_grid(yr_up_down ~ high_low, scales = "free_y")
```

```{r}
bartype_sum <- ggplot(result |>
  group_by(bar_type) |>
  summarize_at("c2c_pct", sum, na.rm=TRUE),
  aes(x=bar_type, weight= c2c_pct, fill = bar_type)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(subtitle = "Sum of % Returns by Bar Type", x = NULL, y = NULL, fill = NULL) +
  scale_fill_brewer(palette = "Set1") +
  theme_hc()

bartype_cnt <- ggplot(result |> select(bar_type), aes(bar_type, fill = bar_type)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  labs(subtitle = "Count of Bar Type", x = NULL, y = NULL, fill = NULL) +
  scale_fill_brewer(palette = "Set1") +
  theme_hc()

bartype_distr <- ggplot(result |> select(bar_type, c2c_pct), aes(x = bar_type, y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = bar_type), 
    alpha = 0.7,
    show.legend = FALSE,
    na.rm = TRUE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = bar_type), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75,
    na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    subtitle = "Distribution (%) of Returns by Bar Type", 
    x = NULL, 
    y = NULL, 
    color = NULL) +
  scale_color_brewer(palette = "Set1") +
  theme_hc()

((bartype_distr + (bartype_cnt / bartype_sum)) / guide_area()) + 
  plot_layout(guides = "collect", heights = c(4,1))
```

```{r}
barTypeBreakdown <- dbGetQuery(
  con,
  "WITH factors_cte AS (
      SELECT m.*, 
      	fc.* EXCLUDE (dt),
      FROM spy_monthly m
      	LEFT JOIN spy_monthly_factorcalcs fc ON m.dt = fc.dt
      ORDER BY m.dt
  )
  select round(open_prev_rng, 1) as open_prev_rng, 
  	count(o2c_pct) as cnt, 
  	sum(o2c_pct) as sum_o2c_pct, 
  	quantile_cont(o2c_pct, [0.25, 0.5, 0.75]) as o2c_pct_dist,
  from factors_cte
  where open_prev_rng is not null
  group by round(open_prev_rng, 1)
  order by round(open_prev_rng, 1) desc;")
```

```{r}
#result |>
#  filter(!is.na(open_prev_rng)) |>
#  mutate(opr_rnd = round(open_prev_rng, 1)) |>
#  arrange(opr_rnd) |>
#  group_by(opr_fctr = factor(
#    percent(opr_rnd),
#    levels = percent(unique(opr_rnd)),
#    ordered = TRUE)) |>
#  summarize_at("c2c_pct", sum, na.rm=TRUE)

result |>
  filter(!is.na(open_prev_rng)) |>
  mutate(opr_rnd = round(open_prev_rng, 1)) |>
  arrange(opr_rnd) |>
  mutate(opr_fctr = factor(
    percent(opr_rnd),
    levels = percent(unique(opr_rnd)),
    ordered = TRUE)) |>
  select(opr_rnd, opr_fctr, c2c_pct)
```

```{r}
#| fig-width: 10
#| fig-height: 12

fills <- c(sapply(c("Set1", "Set2"), function(x) brewer.pal(8, x)))

prev_rng_sum <- ggplot(result |>
  filter(!is.na(open_prev_rng)) |>
  mutate(opr_rnd = round(open_prev_rng, 1)) |>
  arrange(opr_rnd) |>
  group_by(opr_fctr = factor(
    percent(opr_rnd),
    levels = percent(unique(opr_rnd)),
    ordered = TRUE)) |>
  summarize_at("c2c_pct", sum, na.rm=TRUE),
  aes(x=opr_fctr, weight= c2c_pct, fill = opr_fctr)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    subtitle = "Sum of % Returns by Open Price as % of Prev. Range", 
    x = NULL, 
    y = NULL, 
    fill = NULL) +
  scale_fill_manual(values = fills) +
  theme_hc() + 
  guides(fill = guide_legend(ncol = 7, byrow = TRUE))

prev_rng_cnt <- ggplot(result |>
    filter(!is.na(open_prev_rng)) |>
    mutate(opr_rnd = round(open_prev_rng, 1)) |>
    arrange(opr_rnd) |>
    mutate(opr_fctr = factor(
      percent(opr_rnd),
      levels = percent(unique(opr_rnd)),
      ordered = TRUE)) |>
    select(opr_rnd, opr_fctr), 
    aes(opr_fctr, fill = opr_fctr)) +
  geom_bar(na.rm = TRUE) +
  scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  labs(subtitle = "Count of Open Price as % of Prev. Range", x = NULL, y = NULL, fill = NULL) +
  scale_fill_manual(values = fills) +
  theme_hc() + 
  guides(fill = guide_legend(ncol = 7, byrow = TRUE))

prev_rng_distr <- ggplot(result |>
  filter(!is.na(open_prev_rng)) |>
  mutate(opr_rnd = round(open_prev_rng, 1)) |>
  arrange(opr_rnd) |>
  mutate(opr_fctr = factor(
    percent(opr_rnd),
    levels = percent(unique(opr_rnd)),
    ordered = TRUE)) |>
  select(opr_rnd, opr_fctr, c2c_pct), 
  aes(x = opr_fctr, y = c2c_pct)) +
  geom_jitter(
    width = 0.35, 
    aes(color = opr_fctr), 
    alpha = 0.7,
    show.legend = FALSE,
    na.rm = TRUE) +
  geom_boxplot(
    show.legend = FALSE, 
    outlier.shape = NA, 
    aes(fill = opr_fctr), 
    alpha = 0.0,
    fatten = 1,
    lwd = 0.75,
    na.rm = TRUE) +
  #scale_x_discrete(labels = NULL, breaks = NULL, guide = guide_axis(n.dodge = 0)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    subtitle = "Distribution (%) of Returns by Open Price as % of Prev. Range", 
    x = NULL, 
    y = NULL, 
    color = NULL) +
  scale_color_manual(values = fills) +
  theme_hc() + 
  guides(fill = guide_legend(ncol = 7, byrow = TRUE))

prev_rng_cnt / prev_rng_sum / prev_rng_distr / guide_area() + 
  plot_layout(guides = "collect", heights = c(2, 2, 4 ,1))
```

```{r}
# Candlestick Chart -----

#' @rdname geom_chart
#' @export
geom_candlestick <- function(
    mapping = NULL, data = NULL, stat = "identity",
    position = "identity", na.rm = TRUE, show.legend = NA,
    inherit.aes = TRUE,
    colour_up = "darkblue", colour_down = "red",
    fill_up = "darkblue", fill_down = "red",
    ...) {

    linerange <- ggplot2::layer(
        stat = StatLinerangeBC, 
        geom = GeomLinerangeBC, 
        data = data, 
        mapping = mapping,
        position = position, 
        show.legend = show.legend, 
        inherit.aes = inherit.aes,
        params = list(na.rm = na.rm, fill_up = fill_up, fill_down = fill_down,
          colour_up = colour_up, colour_down = colour_down, ...)
    )

    rect <- ggplot2::layer(
        stat = StatRectCS, geom = GeomRectCS, data = data, mapping = mapping,
        position = position, show.legend = show.legend, inherit.aes = inherit.aes,
        params = list(na.rm = na.rm, fill_up = fill_up, fill_down = fill_down,
                      colour_up = colour_up, colour_down = colour_down, ...)
    )

    list(linerange, rect)
}

GeomLinerangeBC <- ggplot2::ggproto(
  "GeomLinerangeBC", 
  ggplot2::GeomLinerange,
  default_aes = ggplot2::aes(
    linewidth = 0.5,
    linetype = 1,
    alpha = NA))

StatLinerangeBC <- ggplot2::ggproto(
  "StatLinerangeBC", 
  ggplot2::Stat,
  required_aes = c("x", "open", "high", "low", "close"),
  dropped_aes = c("open", "high", "low", "close", "y"),
  compute_group = function(
    data, scales, params,
    fill_up, fill_down,
    colour_up, colour_down) {
  
      data <-  data %>%
          dplyr::mutate(color = ifelse(open < close, colour_up, colour_down))
  
      tibble::tibble(
        x = data$x,
        ymin = data$low,
        ymax = data$high,
        colour = data$color)
  })

StatRectCS <- ggplot2::ggproto(
  "StatRectCS", 
  ggplot2::Stat,
  required_aes = c("x", "open", "high", "low", "close"),
  dropped_aes = c("open", "high", "low", "close", "x", "y"),
  compute_group = function(data, scales, params,
     fill_up, fill_down,
     colour_up, colour_down) {
  
        data <-  data %>%
          dplyr::mutate(
            fill = ifelse(open < close, fill_up, fill_down),
            ymin = ifelse(open < close, open, close),
            ymax = ifelse(open < close, close, open))
    
        tibble::tibble(
          xmin = data$x - 0.45,
          xmax = data$x + 0.45,
          ymin = data$ymin,
          ymax = data$ymax,
          fill = data$fill)
  })

GeomRectCS <- ggplot2::ggproto(
  "GeomRectCS", 
  ggplot2::GeomRect,
  default_aes = ggplot2::aes(
    colour = NA,
    linewidth = 0.5,
    linetype = 1,
    alpha = NA))
```

```{r}
#https://stackoverflow.com/questions/72246317/can-i-choose-the-fill-based-on-the-color
#ggplot(d, 
#  aes(x, y, color = category, 
#    fill = stage(p, 
#      after_scale = ifelse(fill == "white", fill, color)))) + 
#  geom_point(shape = "circle filled") + 
#  scale_fill_manual(values = c("TRUE" = "white", "FALSE" = "black"))

daySubset |>
  mutate(condition = ifelse(close == 204.97, TRUE, FALSE))
```

```{r}
#myCandle <- function(x, open, high, low, close, ...) {
#  geom_linerange(aes(x = x, ymin = ifelse(close > open, close, open), ymax = high))
#}

ggplot(daySubset |> mutate(condition = ifelse(close == 204.97 | close == 201.99, TRUE, FALSE)),
       aes(x = dt, y = close)) +
  geom_linerange(#data = daySubset, 
    mapping = aes(x = dt, ymin = ifelse(close > open, close, open), ymax = high, color = condition)) +
  geom_rect(#data = daySubset, 
    mapping = aes(
      xmin = dt - 0.3, 
      xmax = dt + 0.3, 
      ymin = ifelse(close > open, open, close), 
      ymax = ifelse(close > open, close, open),
      alpha = ifelse(close > open, "up", "down"),
      color = condition,
      fill = after_scale(color))#, 
    #color = "black",
    #fill = "black"
    ) +
  geom_linerange(#data = daySubset, 
    mapping = aes(x = dt, ymin = low, ymax = ifelse(close > open, open, close), color = condition)) +
  scale_alpha_discrete(range = c(1, 0), guide = "none") +
  scale_color_manual(values = c("black", "orange")) +
  theme_bw() +
  labs(title = "Candlestick Example", color = "Condition")
  #myCandle(x = dt, open = open, high = high, low = low, close = close)
```

```{r}
geom_candle <- function(
    x = NULL, 
    o = NULL, 
    h = NULL, 
    l = NULL, 
    c = NULL, 
    bodyWidth = 0.3, 
    ...) {
  list(
    geom_linerange(
      mapping = aes(
        x = {{ x }},
        ymin = ifelse({{ c }} > {{ o }}, {{ c }}, {{ o }}),
        ymax = {{ h }},
        ...
      )
    ),
    geom_rect(
      mapping = aes(
        xmin = {{ x }} - {{ bodyWidth}},
        xmax = {{ x }} + {{ bodyWidth}},
        ymin = ifelse({{ c }} > {{ o }}, {{ o }}, {{ c }}),
        ymax = ifelse({{ c }} > {{ o }}, {{ c }}, {{ o }}),
        alpha = ifelse({{ c }} > {{ o }}, "up", "down"),
        fill = after_scale(color),
        ...
      )
    ),
    geom_linerange(
      mapping = aes(
        x = {{ x }},
        ymin = {{ l }},
        ymax = ifelse({{ c }} > {{ o }}, {{ o }}, {{ c }}),
        ...
      )
    ),
    scale_alpha_discrete(range = combine(1, 0), guide = "none")
  )
}
```

```{r}
ggplot(daySubset |> 
  mutate(condition = ifelse(
    close == 204.97 | close == 201.99, TRUE, FALSE
  )
),
  aes(x = dt, y = close)) +
  geom_candle(
    x = dt, o = open, h = high, l = low, c = close,
    color = condition
  ) +
  scale_color_manual(values = c("black", "orange")) +
  theme_bw() +
  labs(title = "Candle Function Test", color = "Condition")
```

```{r}
#daySubset <- dbGetQuery(con,
#  "SELECT * FROM spy_1d_adj WHERE dt BETWEEN '2015-01-15' AND '2015-01-30'")

ggplot(daySubset,
       aes(x = dt, y = close)) +
  geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
  labs(title = "Candle Test", y = "Closing Price", x = "") +
  theme_bw()
```

```{r}
fedMtgs <- dbGetQuery(
  con,
  "-- Fed Meetings
WITH fed_mtg_cte AS	(
	SELECT ROW_NUMBER() OVER() AS mtg_nbr, start_dt, end_dt
	FROM main.fomc_dates
	WHERE start_dt > '1993-01-29' AND end_dt < '2024-01-01'
), norm_spy_1d_cte AS (
	SELECT ROW_NUMBER()OVER() AS row_num, dt, open, high, low, close
	FROM main.spy_1d_adj
), norm_fed_mtg_cte AS (
	SELECT m.*, sd.row_num AS start_row, ed.row_num AS end_row
	FROM fed_mtg_cte m
		LEFT JOIN norm_spy_1d_cte sd ON m.start_dt = sd.dt
		LEFT JOIN norm_spy_1d_cte ed ON m.end_dt = ed.dt
)
	SELECT m.mtg_nbr, m.start_dt, m.end_dt, m.start_row, m.end_row, d.row_num, 
		CASE WHEN end_row > start_row AND row_num == end_row THEN 0.5
			WHEN row_num <= start_row THEN row_num - first_value(start_row) OVER(PARTITION BY mtg_nbr) 
			ELSE row_num - last_value(end_row) OVER(PARTITION BY mtg_nbr) END AS mtg_dt_offset,
		d.dt, d.open, d.high, d.low, d.close, 
		s.chg, s.yr_dir, s.yr_pct 
	FROM norm_fed_mtg_cte m
		JOIN norm_spy_1d_cte d ON d.row_num BETWEEN m.start_row -1 AND m.end_row + 1
		JOIN main.spy_1d_agg_stats s ON d.dt = s.dt
	ORDER BY d.dt;")
```

```{r}
ggplot(fedMtgs |> 
  dplyr::filter(lubridate::year(dt) %in% c(2020)) |>
  mutate(condition = ifelse(
    dplyr::between(mtg_dt_offset, 0, 0.5), TRUE, FALSE
  )
),
  aes(x = dt, y = close)) +
  geom_candle(
    x = dt, o = open, h = high, l = low, c = close,
    color = condition
  ) +
  scale_color_manual(values = c("black", "orange")) +
  theme_bw() +
  labs(title = "Fed Meetings", color = "Mtg Days") +
  facet_wrap(~mtg_nbr, scales = "free")
```

```{r}
fedMtgs |>
  dplyr::filter(lubridate::year(dt) %in% c(2018)) |>
  mutate(condition = ifelse(
    dplyr::between(mtg_dt_offset, 0, 1), TRUE, FALSE)
  )
```

### Start Backtest Functions

```{r}
cagr_func <- function(st_eqty, end_eqty, num_yrs) 
{
  ((end_eqty / st_eqty) ^ (1 / num_yrs)) - 1
}
max_dd_func <- function(dd_vctr)
{
  abs(min(dd_vctr))
}
mar_func <- function(cagr, max_dd)
{
  cagr / max_dd
}
sharp_func <- function(pnl_vctr)
{
  mean(pnl_vctr) / sd(pnl_vctr)
}
anlzd_sharp_func <- function(pnl_vctr, anlzd_scale = 12)
{
  sqrt(anlzd_scale) * (mean(pnl_vctr) / sd(pnl_vctr))
}
```

```{r}
add_trades_func <- \(tbl, entryFunc, exitFunc, ...)
{
  tbl |>
    mutate(
      trd_entry = entryFunc(tbl, ...),
      trd_exit = exitFunc(tbl, ...)
    )
}

bt_sim_func <- \(tbl, 
                 init_eqty = 10000, 
                 incl_dividends = FALSE, 
                 incl_buynhold = FALSE)
{
  if (!"rn" %in% colnames(bt_strtgy)) {
   tbl = tbl |> mutate(rn = row_number()) 
  }
  
  tbl_rlen = length(tbl$dt)
  trd_entry_vec = as.numeric(tbl$trd_entry)
  trd_exit_vec = as.numeric(tbl$trd_exit)
  pos_size_vec = vector("numeric" , tbl_rlen)
  pos_val_vec = vector("numeric" , tbl_rlen)
  cash_vec = vector("numeric" , tbl_rlen)
  eqty_vec = vector("numeric" , tbl_rlen)
  eqty_low_vec = vector("numeric" , tbl_rlen)
  eqty_high_vec = vector("numeric" , tbl_rlen)
  open_vec = as.numeric(tbl$open)
  close_vec = as.numeric(tbl$close)
  low_vec = as.numeric(tbl$low)
  high_vec = as.numeric(tbl$high)
  if (incl_dividends) {
   div_vec = as.numeric(tbl$dividend) 
  }
  if (incl_buynhold) {
    bnh_ps_vec = vector("numeric" , tbl_rlen)
    bnh_eqty_vec = vector("numeric" , tbl_rlen)
  }
  
  for (i in seq_along(tbl$dt)) {
    f_row = i == 1
    entry = as.logical(trd_entry_vec[i])
    exit = as.logical(trd_exit_vec[i])
    
    if (f_row & entry) {
      pos_size_vec[i] = round(init_eqty / open_vec[i], 2)
      cash_vec[i] = 0
    } else if (f_row & !entry) {
      pos_size_vec[i] = 0
      cash_vec[i] = init_eqty
    } else if (entry) {
      pos_size_vec[i] = round(cash_vec[i - 1] / open_vec[i], 2)
      cash_vec[i] = 0
    } else if (exit) {
      pos_size_vec[i] = 0
      cash_vec[i] = round(pos_size_vec[i - 1] * open_vec[i], 2)
    } else {
      pos_size_vec[i] = pos_size_vec[i - 1]
      cash_vec[i] = cash_vec[i - 1]
    }
    
    # Handle Buy & Hold data
    if (incl_buynhold) {
      if (f_row) {
        bnh_ps_vec[i] = round(init_eqty / open_vec[i], 2)
      } else {
        bnh_ps_vec[i] = bnh_ps_vec[i - 1]
      }
      
      if (incl_dividends & div_vec[i] > 0) {
        bnh_ps_vec[i] = bnh_ps_vec[i] +
          round((div_vec[i] * bnh_ps_vec[i]) / open_vec[i], 2)
      }
    }
    
    # Handle Dividends for long positions at time of ex-div date
    if (incl_dividends & div_vec[i] > 0 & (pos_size_vec[i] > 0 | exit)) {
      if (pos_size_vec[i] > 0) {
        pos_size_vec[i] = pos_size_vec[i] + 
          round((div_vec[i] * pos_size_vec[i]) / open_vec[i], 2)
      } else {
        cash_vec[i] = cash_vec[i] + round(pos_size_vec[i] * div_vec[i], 2)
      }
    }
    
    pos_val_vec[i] = round(pos_size_vec[i] * close_vec[i], 2)
    eqty_vec[i] = cash_vec[i] + pos_val_vec[i]
    eqty_low_vec[i] = round(cash_vec[i] + (pos_size_vec[i] * low_vec[i]), 2)
    eqty_high_vec[i] = round(cash_vec[i] + (pos_size_vec[i] * high_vec[i]), 2)
    if (incl_buynhold) {
      bnh_eqty_vec[i] = round(bnh_ps_vec[i] * close_vec[i], 2)
    }
  }
  
  tbl = tbl |>
    add_column(pos_size = pos_size_vec,
               pos_val = pos_val_vec,
               cash = cash_vec,
               eqty = eqty_vec,
               eqty_l = eqty_low_vec,
               eqty_h = eqty_high_vec,
               .after = "trd_exit") |>
    mutate(drawdn = round(log(eqty / slide_max(eqty, before=Inf)), 4),
           pos_type = case_when(pos_size > 0 ~ "LONG",
                                pos_size < 0 ~ "SHORT",
                                .default = "FLAT"),
           trd_num = slide_sum(trd_entry, before=Inf)) |>
    group_by(trd_num) |>
    mutate(is_closed = max(trd_exit),
           trd_length = row_number(),
           trd_base = round(first(open) * first(pos_size), 2),
           trd_drawdn = round(log(eqty / slide_max(eqty, before=Inf)), 4),
           trd_drawup = round(log(eqty / trd_base), 4),
           trd_ur_drawdn = round(log(eqty / slide_max(eqty_h, before=Inf)), 4),
           trd_ur_drawup = round(log(eqty_h / trd_base), 4)) |>
    ungroup() |>
    mutate(trd_num = if_else(pos_size == 0, NA, trd_num),
           trd_length = if_else(pos_size == 0, NA, trd_length),
           trd_drawdn = if_else(pos_size == 0, NA, trd_drawdn),
           trd_drawup = if_else(pos_size == 0, NA, trd_drawup),
           trd_ur_drawdn = if_else(pos_size == 0, NA, trd_ur_drawdn),
           trd_ur_drawup = if_else(pos_size == 0, NA, trd_ur_drawup),
           trd_base = if_else(pos_size == 0, NA, trd_base),
           pct_chg = round(
             if_else(rn == 1, log(eqty/init_eqty), log(eqty/lag(eqty))),
             4)
           )
  
  if (incl_buynhold) {
    tbl = tbl |>
      add_column(
        bnh_pos_size = bnh_ps_vec,
        bnh_eqty = bnh_eqty_vec,
        .after = "pct_chg"
      ) |>
      mutate(
        bnh_pct_chg = round(
         if_else(rn == 1, log(bnh_eqty/init_eqty), log(bnh_eqty/lag(bnh_eqty))),
         4),
        bnh_dd = round(log(bnh_eqty / slide_max(bnh_eqty, before=Inf)), 4),
        .after = "bnh_eqty"
      )
  }

  return(tbl)
}

bt_trds_func <- \(tbl) {
  tbl = tbl |>
    drop_na() |>
    group_by(trd_num) |>
    summarise(trd_st_dt = first(dt),
              trd_end_dt = last(dt),
              trd_type = first(pos_type),
              trd_rslt = case_when(
                last(is_closed) == 1 & last(eqty) - first(trd_base) > 0 ~ "Winner",
                last(is_closed) == 1 & last(eqty) - first(trd_base) <= 0 ~ "Loser",
                .default = "Open"),
              ttl_trd_len = max(trd_length),
              trd_pnl = last(eqty) - first(trd_base),
              trd_pnl_pct = round(log(last(eqty) / first(trd_base)), 4),
              max_trd_drawdn = min(trd_drawdn),
              max_trd_drawup = max(trd_drawup),
              max_ur_drawdn = min(trd_ur_drawdn),
              max_ur_drawup = max(trd_ur_drawup)) |>
    mutate(wl_seq = dense_rank(trd_rslt) |> consecutive_id()) |>
    group_by(wl_seq) |>
    mutate(consec_win_loss = if_else(trd_rslt == "Open", NA, seq_along(wl_seq)),
           .after = trd_rslt) |>
    ungroup() |>
    select(-wl_seq)
}

bt_winloss_func <- \(tbl) {
  tbl = tbl |>
    filter(trd_rslt != "Open") |>
    group_by(trd_rslt) |>
    summarise(trd_cnt = n(),
              gross_pnl = sum(trd_pnl),
              max_win_loss = if_else(
                first(trd_rslt) == "Winner",
                max(trd_pnl),
                min(trd_pnl)),
              max_consec_win_loss = max(consec_win_loss),
              avg_pnl = mean(trd_pnl, na.rm = TRUE),
              avg_length = mean(ttl_trd_len, na.rm = TRUE)
    ) 
}

bt_totals_func <- \(tbl, trds_tbl) {
  trds_tbl = trds_tbl |>
    filter(trd_rslt != "Open") |>
    summarise(summary = "Totals",
              trd_cnt = n(),
              pct_profitable = sum(ifelse(trd_rslt == "Winner", 1, 0)) / n(),
              net_profit = sum(trd_pnl),
              avg_pnl = mean(trd_pnl, na.rm = TRUE),
              avg_length = mean(ttl_trd_len, na.rm = TRUE),
              avg_win_loss_ratio = 
                mean(ifelse(trd_rslt == "Winner", trd_pnl, NA), na.rm = TRUE) /
                abs(mean(ifelse(trd_rslt == "Loser", trd_pnl, NA), na.rm = TRUE)),
              profit_factor = 
                sum(ifelse(trd_rslt == "Winner", 1, 0)) / 
                sum(ifelse(trd_rslt == "Loser", 1, 0)),
              rlzd_roa_pct = exp(sum(trd_pnl_pct)) - 1,
              ttl_roa_pct = exp(sum(trds_tbl$trd_pnl_pct)) - 1,
              max_trd_drawdn_pct = min(max_trd_drawdn),
              max_cum_drawdn_pct = min(tbl$drawdn))  
} 

bt_unrlzd_func <- \(tbl, init_eqty, incl_buynhold) {
  unrlzd_tbl = tbl |>
    summarise(
      unrlzd_net_profit = last(eqty) - init_eqty,
      unrlzd_roa_pct = exp(sum(pct_chg)) - 1
    )
  
  if (incl_buynhold) {
    bnh_unrlzd_tbl = tbl |>
      summarise(
        bnh_net_profit = last(bnh_eqty) - init_eqty,
        bnh_ttl_roa_pct = exp(sum(bnh_pct_chg)) - 1
      )
    
    unrlzd_tbl = unrlzd_tbl |>
      add_column(
        bnh_unrlzd_net_profit = bnh_unrlzd_tbl$bnh_net_profit,
        bnh_unrlzd_ttl_roa_pct = bnh_unrlzd_tbl$bnh_ttl_roa_pct
      )
  }
  
  return(unrlzd_tbl)
} 

bt_yrly_func <- \(tbl, init_eqty, incl_buynhold) {
  yrly_tbl = tbl |>
    mutate(yr = year(dt),
           prev_eqty = lag(eqty)) |>
    group_by(yr) |>
    summarise(st_eqty = if_else(is.na(first(prev_eqty)),
                                init_eqty,
                                first(prev_eqty)),
              end_eqty = last(eqty),
              max_yr_drawdn = min(drawdn))
  
  if (incl_buynhold) {
    bnh_yrly_tbl = tbl |>
      mutate(yr = year(dt),
             bnh_prev_eqty = lag(bnh_eqty)) |>
      group_by(yr) |>
      summarise(bnh_st_eqty = if_else(is.na(first(bnh_prev_eqty)),
                                init_eqty,
                                first(bnh_prev_eqty)),
              bnh_end_eqty = last(bnh_eqty),
              bnh_max_yr_dd = min(bnh_dd))
    
    yrly_tbl = yrly_tbl |>
      add_column(
        bnh_st_eqty = bnh_yrly_tbl$bnh_st_eqty,
        bnh_end_eqty = bnh_yrly_tbl$bnh_end_eqty,
        bnh_max_yr_dd = bnh_yrly_tbl$bnh_max_yr_dd
      )
  }
  
  return(yrly_tbl)
} 

calcs_strtgy_func <- \(tbl, yrly_tbl, trds_tbl) {
  time_in_mkt_val = nrow(tbl |> drop_na()) / nrow(tbl)
  
  cagr_val = round(
    cagr_func(
      dplyr::first(yrly_tbl$st_eqty),
      dplyr::last(yrly_tbl$end_eqty),
      nrow(yrly_tbl)),
    4)
  
  mar_val = round(
    mar_func(
      cagr_val,
      max_dd_func(yrly_tbl$max_yr_drawdn)),
    3)
  
  yrly_tbl_tail = dplyr::slice_tail(yrly_tbl, n = 3)
  calmar_val = round(
    mar_func(
      cagr_func(
        dplyr::first(yrly_tbl_tail$st_eqty),
        dplyr::last(yrly_tbl_tail$end_eqty),
        nrow(yrly_tbl_tail)),
      max_dd_func(yrly_tbl_tail$max_yr_drawdn)),
    3)
  
  sharp_val = round(sharp_func(trds_tbl$trd_pnl), 3)
  
  anlzd_sharp_val = round(anlzd_sharp_func(tbl$pct_chg, 12), 3)
  
  return(list(
    time_in_mkt = time_in_mkt_val,
    cagr = cagr_val,
    mar = mar_val,
    calmar = calmar_val,
    sharp = sharp_val,
    anlzd_sharp = anlzd_sharp_val
  ))
}

calcs_bnh_func <- \(tbl, yrly_tbl) {
  bnh_cagr_val = round(
    cagr_func(
      dplyr::first(yrly_tbl$bnh_st_eqty),
      dplyr::last(yrly_tbl$bnh_end_eqty),
      nrow(yrly_tbl)),
    4)
  
  bnh_mar_val = round(
    mar_func(
      bnh_cagr_val,
      max_dd_func(yrly_tbl$bnh_max_yr_dd)),
    3)
  
  yrly_tbl_tail = dplyr::slice_tail(yrly_tbl, n = 3)
  bnh_calmar_val = round(
    mar_func(
      cagr_func(
        dplyr::first(yrly_tbl_tail$bnh_st_eqty),
        dplyr::last(yrly_tbl_tail$bnh_end_eqty),
        nrow(yrly_tbl_tail)),
      max_dd_func(yrly_tbl_tail$bnh_max_yr_dd)),
    3)
  
  bnh_anlzd_sharp_val <- round(anlzd_sharp_func(tbl$bnh_pct_chg, 12), 3)
  
  return(list(
      cagr = bnh_cagr_val,
      mar = bnh_mar_val,
      calmar = bnh_calmar_val,
      anlzd_sharp = bnh_anlzd_sharp_val
    ))
}
```

```{r}
bt_viz_func <- \(metrics, init_eqty = 10000, incl_buynhold = FALSE) {
  wnr = metrics$data_winloss |> dplyr::filter(trd_rslt == "Winner")
  lsr = metrics$data_winloss |> dplyr::filter(trd_rslt == "Loser")
  ttl = metrics$data_totals
  unr = metrics$data_unrlzd
  st_dt = dplyr::first(metrics$data_series$dt)
  end_dt = dplyr::last(metrics$data_series$dt)
  
  bt_fmt_tbl = tribble(
    ~RowName, ~Group, ~Totals, ~Winners, ~Losers,
    "Trade Count", "Trade Stats", ttl$trd_cnt, wnr$trd_cnt, lsr$trd_cnt,
    "Profit & Loss", "Trade Stats", ttl$net_profit, wnr$gross_pnl, lsr$gross_pnl,
    "Avg P&L", "Trade Stats", ttl$avg_pnl, wnr$avg_pnl, lsr$avg_pnl,
    "Avg Bars", "Trade Stats", ttl$avg_length, wnr$avg_length, lsr$avg_length,
    "Max Consecutive", "Trade Stats", NA, wnr$max_consec_win_loss, lsr$max_consec_win_loss,
    "Max Amount", "Trade Stats", NA, wnr$max_win_loss, lsr$max_win_loss,
    "Profitable", "Summary Stats", ttl$pct_profitable, NA, NA,
    "Closed ROA", "Summary Stats", ttl$ttl_roa_pct, NA, NA,
    "Cumul. ROA", "Summary Stats", unr$unrlzd_roa_pct, NA, NA,
    "Max Trade DD", "Summary Stats", ttl$max_trd_drawdn_pct, NA, NA,
    "Max Cumul. DD", "Summary Stats", ttl$max_cum_drawdn_pct, NA, NA,
    "Profit Factor", "Summary Stats", ttl$profit_factor, NA, NA,
    "CAGR", "Summary Stats", metrics$calcs_strtgy$cagr, NA, NA,
    "MAR", "Summary Stats", metrics$calcs_strtgy$mar, NA, NA,
    "CALMAR", "Summary Stats", metrics$calcs_strtgy$calmar, NA, NA,
    "Sharpe", "Summary Stats", metrics$calcs_strtgy$sharp, NA, NA,
    "Ann. Sharpe", "Summary Stats", metrics$calcs_strtgy$anlzd_sharp, NA, NA,
    "Total Months", "Misc. Stats", nrow(metrics$data_series), NA, NA,
    "Trade Months", "Misc. Stats", nrow((metrics$data_series) |> drop_na()), NA, NA,
    "Time in Market", "Misc. Stats", metrics$calcs_strtgy$time_in_mkt, NA, NA,
    "Initial Equity", "Misc. Stats", init_eqty, NA, NA,
    "End Equity", "Misc. Stats", last(metrics$data_series$eqty), NA, NA,
  )
  
  if (incl_buynhold) {
    bnh_list = list(
      "Trade Count" = NA,
      "Profit & Loss" = NA,
      "Avg P&L" = NA,
      "Avg Bars" = NA,
      "Max Consecutive" = NA,
      "Max Amount" = NA,
      "Profitable" = NA,
      "Closed ROA" = NA,
      "Cumul. ROA" = unr$bnh_unrlzd_ttl_roa_pct,
      "Max Trade DD" = NA,
      "Max Cumul. DD" = min(metrics$data_series$bnh_dd),
      "Profit Factor" = NA,
      "CAGR" = metrics$calcs_bnh$cagr,
      "MAR" = metrics$calcs_bnh$mar,
      "CALMAR" = metrics$calcs_bnh$calmar,
      "Sharpe" = NA,
      "Ann. Sharpe" = metrics$calcs_bnh$anlzd_sharp,
      "Total Months" = NA,
      "Trade Months" = NA,
      "Time in Market" = NA,
      "Initial Equity" = init_eqty,
      "End Equity" = last(metrics$data_series$bnh_eqty)
    )
  
    bt_fmt_tbl = bt_fmt_tbl |>
      add_column(BNH = unlist(bnh_list, use.names = FALSE))
  }
  
  bt_gt = bt_fmt_tbl |>
    gt(
      rowname_col = "RowName",
      groupname_col = "Group"
    ) |>
    tab_header(title = "Backtest Results (SPY)",
      subtitle = glue::glue("{st_dt} to {end_dt} (Monthly Aggregation)")) |>
    opt_align_table_header(align = "left") |>
    opt_vertical_padding(scale = 0.5) |>
    tab_footnote(footnote = "*All Dividends are Reinvested") |>
    cols_width(
      RowName ~ px(150),
      everything() ~ px(150)
    ) |>
    tab_style(
      style = list(
        cell_fill(color = "#ececec"),
        cell_text(size = "larger")
      ),
      locations = cells_row_groups(groups = everything())
    ) |>
    fmt_percent(
      rows = RowName %in% c("Profitable", "Closed ROA", "Cumul. ROA", "CAGR", "Time in Market", "Max Trade DD", "Max Cumul. DD"),
      columns = names(bt_fmt_tbl)[-(1:2)],
      accounting = TRUE
    ) |>
    fmt_number(
      rows = RowName %in% c("Trade Count", "Max Consecutive", "Total Months", "Trade Months"),
      columns = names(bt_fmt_tbl)[-(1:2)],
      decimals = 0
    ) |>
    fmt_number(
      rows = RowName %in% c("Avg Bars", "Profit Factor", "MAR", "CALMAR", "Sharpe", "Ann. Sharpe"),
      columns = names(bt_fmt_tbl)[-(1:2)],
      decimals = 3
    ) |>
    fmt_currency(
      rows = RowName %in% c("Profit & Loss", "Avg P&L", "Max Amount", "Initial Equity", "End Equity"),
      columns = names(bt_fmt_tbl)[-(1:2)],
      accounting = TRUE
    ) |>
    sub_values(fn = \(x) is.na(x), replacement = "")
  
  if (incl_buynhold) {
    bt_gt = bt_gt |>
      cols_label(BNH ~ "Buy & Hold") |>
      tab_spanner(label = "Strategy", columns = c("Totals", "Winners", "Losers"))
  }
  
  return(bt_gt)
}
```

```{r}
get_trades_base <- \(tbl, fun, cnt)
  tbl |>
    filter(trd_rslt != "Open") |>
    fun(trd_pnl_pct, n = cnt) |>
    arrange(trd_num)

get_n_worst_trades <- \(tbl, cnt)
  get_trades_base(tbl, slice_min, cnt)
get_n_best_trades <- \(tbl, cnt)
  get_trades_base(tbl, slice_max, cnt)

data_ex_n_trds_func <- \(data_tbl, trd_tbl, trd_type_func, n_trds) {
  rm_trds = as.numeric((trd_tbl |> trd_type_func(n_trds))$trd_num)

  criteria_ex_trds = data_tbl |>
    select(dt, trd_entry, trd_exit, trd_num) |>
    mutate(trd_num_x = ifelse(trd_exit == 1 & is.na(trd_num),
                              lag(trd_num),
                              trd_num),
           trd_entry = ifelse(trd_num %in% rm_trds, 0, trd_entry),
           trd_exit = ifelse(trd_num_x %in% rm_trds, 0, trd_exit)) |>
    select(-trd_num, -trd_num_x)

  data_ex_trds = data_tbl |>
    select(-c(trd_entry:tidyselect::last_col())) |>
    left_join(criteria_ex_trds, by = join_by(dt))

  return(data_ex_trds)
}

ex_n_trd_calcs_func <- \(strtgy_ex_trds, 
                         init_eqty = 10000, 
                         incl_dividends = FALSE) {
  ex_data_tbl = strtgy_ex_trds |>
    bt_sim_func(
      init_eqty = init_eqty,
      incl_dividends = incl_dividends,
      incl_buynhold = FALSE)
  
  ex_trd_tbl = ex_data_tbl |> bt_trds_func()
  ex_yrly_tbl = ex_data_tbl |> bt_yrly_func(init_eqty, FALSE)
  
  ex_calcs_strtgy = calcs_strtgy_func(
    tbl = ex_data_tbl,
    yrly_tbl = ex_yrly_tbl,
    trds_tbl = ex_trd_tbl)
  
  return(ex_calcs_strtgy)
}

calcs_to_row_func <- \(calc_list, trd_type, n_trds) {
  utils::modifyList(
      list(rm_trds = trd_type, n = n_trds), 
      calc_list) |>
    as_tibble_row()
}

rm_best_worst_trds_func <- \(data_tbl, 
                             trd_tbl, 
                             orig_calcs, 
                             n_trds = 3, 
                             init_eqty = 10000,
                             incl_dividends = FALSE) {
  all_trds_tbl = orig_calcs |> calcs_to_row_func("none", NA)
  
  ex_best_tbl = data_ex_n_trds_func(
      bt_metrics$data_series,
      bt_metrics$data_trd,
      get_n_best_trades,
      n_trds) |>
    ex_n_trd_calcs_func(init_eqty, incl_dividends) |>
    calcs_to_row_func("best", n_trds)
  
  ex_worst_tbl = bt_ex_worst3_tst <-data_ex_n_trds_func(
      bt_metrics$data_series,
      bt_metrics$data_trd,
      get_n_worst_trades,
      n_trds) |>
    ex_n_trd_calcs_func(init_eqty, incl_dividends) |>
    calcs_to_row_func("worst", n_trds)
  
  comb_tbl = rbind(ex_worst_tbl, all_trds_tbl, ex_best_tbl)
  
  return(comb_tbl)
}

rm_trds_gt_func <- \(tbl) {
  tbl |>
    dplyr::mutate(scenario = if_else(
        rm_trds == "none", 
        "All Trades", 
        glue("{n} {str_to_title(rm_trds)} Trade{ifelse(n != 1, 's', '')} Removed")
      ),
      .before = rm_trds) |>
    gt(
      rowname_col = "scenario"
    ) |>
    cols_hide(c(rm_trds, n)) |>
    cols_label(
      rm_trds = "Scenario",
      time_in_mkt = "Time in Market",
      cagr = "CAGR",
      mar = "MAR",
      calmar = "CALMAR",
      sharp = "Sharpe",
      anlzd_sharp = "Ann. Sharpe") |>
    tab_header(title = "Edge Case Comparisons") |>
    opt_align_table_header(align = "left") |>
    opt_vertical_padding(scale = 0.5) |>
    tab_footnote(footnote = "*All Dividends are Reinvested") |>
    cols_width(
      scenario ~ px(250),
      everything() ~ px(125)
    ) |>
    fmt_percent(
      columns = c(time_in_mkt, cagr),
      accounting = TRUE
    ) |>
    fmt_number(
      columns = c(mar, calmar, sharp, anlzd_sharp),
      decimals = 3
    )
}
```

### Back Test Processing

```{r}
bt_processor <- \(data_tbl, 
                  entry_func, 
                  exit_func, 
                  init_eqty = 10000, 
                  incl_buynhold = TRUE, 
                  incl_dividends = TRUE, 
                  ...) {
  data_val = data_tbl |>
    add_trades_func(entry_func, exit_func) |>
    bt_sim_func(
      init_eqty = init_eqty,
      incl_dividends = incl_dividends,
      incl_buynhold = incl_buynhold)
  
  trd_val = data_val |> bt_trds_func()
  
  winloss_val = trd_val |> bt_winloss_func()
  
  totals_val = bt_totals_func(data_val, trd_val)
  
  unrlzd_val = data_val |> bt_unrlzd_func(init_eqty, incl_buynhold)
  
  yrly_val = data_val |> bt_yrly_func(init_eqty, incl_buynhold)
  
  calcs_strtgy_val = calcs_strtgy_func(
    tbl = data_val,
    yrly_tbl = yrly_val,
    trds_tbl = trd_val)
  
  if (incl_buynhold) {
    calcs_bnh_val = calcs_bnh_func(
      tbl = data_val,
      yrly_tbl = yrly_val)
  }
  
  metrics_val = list(
    data_series = data_val,
    data_trd = trd_val,
    data_yrly = yrly_val,
    data_winloss = winloss_val,
    data_totals = totals_val,
    data_unrlzd = unrlzd_val,
    calcs_strtgy = calcs_strtgy_val
  )
  
  if (incl_buynhold) {
    metrics_val <- append(metrics_val, list(
      calcs_bnh = calcs_bnh_val
    ))
  }

  rslts_viz_func = \() bt_viz_func(metrics_val, init_eqty, incl_buynhold)
  
  best_worst_viz_func = \(n_trds = 1, as_tbl = FALSE) {
    rm_best_worst_trds = rm_best_worst_trds_func(
      data_tbl = data_val,
      trd_tbl = trd_val,
      orig_calcs = calcs_strtgy_val,
      n_trds = n_trds,
      init_eqty = init_eqty,
      incl_dividends = incl_dividends) 
    
    if (as_tbl) {
      return(rm_best_worst_trds)
    } else {
      rm_best_worst_trds_gt = rm_best_worst_trds |>
        rm_trds_gt_func()
      
      return(rm_best_worst_trds_gt)
    }
  }

  metrics_val = append(metrics_val, list(
    rslts_viz = rslts_viz_func,
    best_worst_viz = best_worst_viz_func
  ))
  
  return(metrics_val)
}
```

```{r}
init_eqty <- 10000
incl_dividends <- TRUE
incl_buynhold <- TRUE

strtgy_entry <- \(.) {
 ifelse((.$mth_nbr == 11 | (.$mth_nbr == 1 & .$rn == 1)), 1, 0)
}
strtgy_exit <- \(.) {
 ifelse(.$mth_nbr == 8, 1, 0)
}

bt_strtgy <- result |>
  filter(year(dt) %in% c(2000:2020)) |>
  mutate(rn = row_number(),
         mth_nbr = month(dt),
         dividend = if_else(is.na(dividend), 0, dividend)) |>
  select(dt, open, high, low, close, rn, mth_nbr, dividend)

bt_metrics <- bt_processor(bt_strtgy,
                            strtgy_entry,
                            strtgy_exit,
                            init_eqty = 10000,
                            incl_buynhold = TRUE,
                            incl_dividends = TRUE)

bt_metrics$rslts_viz()
# bt_metrics$best_worst_viz(3)
```

### Bactest Visualizations

```{r}
tblA <- tribble(
  ~colA, ~colB,
  "A", 1,
  "B", 2,
  "C", 3,
) |>
  gt() |>
  tab_options(table.font.size = 30, table.font.color = "purple")
tblB <- tribble(
  ~colC, ~colD,
  "D", 4,
  "E", 5,
  "F", 6,
) |>
  gt() |>
  tab_options(table.font.size = 30)
tblC <- tribble(
  ~colE, ~colF, ~colG, ~colH,
  "G", 7, "J", 10,
  "H", 8, "K", 11,
  "I", 9, "L", 12,
) |>
  gt() |>
  tab_options(table.font.size = 30)
```

```{r}
d1 <- c(
  area(1,1,1,2),
  area(2,1),
  area(2,2)
)
d2 <- c(
  area(1,1),
  area(2,1)
)
  
(
  plot_spacer() +
  wrap_table(tblA, panel = "rows", space = "fixed") +
  wrap_table(tblB, panel = "rows", space = "fixed") +
  plot_layout(ncol = 2, nrow = 2, design = d1)
) /
(
  wrap_table(tblC, panel = "rows", space = "free_y") +
  plot_spacer() +
  plot_layout(ncol = 1, nrow = 2, design = d2)
)
```

### Ex. Best/Worst n Trades Comparisons Section

```{r}
# remove_trades_base <- \(tbl, fun, cnt)
#   tbl |>
#     filter(trd_rslt != "Open") |>
#     fun(trd_pnl_pct, n = -cnt) |>
#     arrange(trd_num)

# remove_n_worst_trades <- \(tbl, cnt) 
#   remove_trades_base(tbl, slice_max, cnt)
# remove_n_best_trades <- \(tbl, cnt) 
#   remove_trades_base(tbl, slice_min, cnt)

# bt_trd_data |> remove_n_best_trades(3)

# get_trades_base <- \(tbl, fun, cnt)
#   tbl |>
#     filter(trd_rslt != "Open") |>
#     fun(trd_pnl_pct, n = cnt) |>
#     arrange(trd_num)
# 
# get_n_worst_trades <- \(tbl, cnt)
#   get_trades_base(tbl, slice_min, cnt)
# get_n_best_trades <- \(tbl, cnt)
#   get_trades_base(tbl, slice_max, cnt)
  
# bt_trd_data |> get_n_best_trades(3)
# bt_trd_data |> get_n_worst_trades(3) 

# rm_trds_worst <- as.numeric((bt_trd_data |> get_n_worst_trades(3))$trd_num)
rm_trds_best <- as.numeric(
  (bt_metrics$data_trd |> get_n_best_trades(3))$trd_num)

# bt_criteria_x_worst <- bt_data |> 
#   select(dt, trd_entry, trd_exit, trd_num) |>
#   mutate(trd_num_x = ifelse(trd_exit == 1 & is.na(trd_num), 
#                             lag(trd_num), 
#                             trd_num),
#          trd_entry = ifelse(trd_num %in% rm_trds_worst, 0, trd_entry),
#          trd_exit = ifelse(trd_num_x %in% rm_trds_worst, 0, trd_exit)) |>
#   select(-trd_num, -trd_num_x)

bt_criteria_x_best <- bt_metrics$data_series |> 
  select(dt, trd_entry, trd_exit, trd_num) |>
  mutate(trd_num_x = ifelse(trd_exit == 1 & is.na(trd_num), 
                            lag(trd_num), 
                            trd_num),
         trd_entry = ifelse(trd_num %in% rm_trds_best, 0, trd_entry),
         trd_exit = ifelse(trd_num_x %in% rm_trds_best, 0, trd_exit)) |>
  select(-trd_num, -trd_num_x)

# bt_data |>
#   select(-c(trd_entry:tidyselect::last_col())) |>
#   left_join(bt_criteria_x_worst, by = join_by(dt))

bt_metrics$data_series |>
  select(-c(trd_entry:tidyselect::last_col())) |>
  left_join(bt_criteria_x_best, by = join_by(dt))

# bt_trd_data |> get_n_best_trades(3)
# bt_trd_data |> get_n_worst_trades(3)

```

```{r}
tribble(
  ~Key, ~Group, ~All, ~Pos, ~Neg,
  "Count", "item", 5000, 2000, 3000,
  "Sum", "item", 50000.21, 25000.21, 25000,
  "Average", "item", 1.00, 0.505, 0.495,
  "First", "calculations", 0.52, NA, NA,
  "Second", "calculations", 0.0123, NA, NA,
) |>
  gt(
    rowname_col = "Key",
    groupname_col = "Group"
  ) |>
  tab_header(title = html(
    "<h3 style='margin-left: 1.5rem;'>Example Title</h3>"
  )) |>
  opt_align_table_header(align = "left") |>
  opt_vertical_padding(scale = 0.5) |>
  cols_label(Pos ~ "Winners", Neg ~ "Losers") |>
  text_transform(
    locations = cells_row_groups(),
    fn = \(x) str_to_title(x)
  ) |>
  tab_spanner(label = "Outcome", columns = c(All, Pos, Neg)) |>
  tab_style(
    style = list(
      cell_fill(color = "gray75"),
      cell_text(size = "larger")
    ),
    locations = cells_row_groups(groups = everything())
  ) |>
  cols_add(dir = ifelse(Group == "item", "red", "forestgreen")) |>
  cols_label(dir = "") |>
  text_case_match(
    "red" ~ fontawesome::fa("arrow-down"),
    "forestgreen" ~ fontawesome::fa("arrow-up")
  ) |>
  tab_style(
    style = cell_text(color = from_column("dir")),
    locations = cells_body(columns = dir)
  ) |>
  tab_style(
    style = cell_fill(color = "lightcyan"),
    locations = cells_body(rows = Key == "Second")
  ) |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("top", "left", "bottom", "right"),
        color = "#FF0000",
        weight = px(1.0)
      )
    ),
    locations = list(
      cells_body(columns = Pos, rows = Key == "Sum")
    )
  ) |>
  cols_width(
    Key ~ px(100),
    dir ~ px(30),
    everything() ~ px(150)
  ) |>
  fmt_percent(
    rows = Key %in% c("Average", "First", "Second"),
    columns = c("All", "Pos", "Neg")
  ) |>
  fmt_number(
    rows = Key %in% c("Count"),
    columns = c("All", "Pos", "Neg"),
    decimals = 0
  ) |>
  fmt_currency(
    rows = Key %in% c("Sum"),
    columns = c("All", "Pos", "Neg")
  ) |>
  sub_values(fn = \(x) is.na(x), replacement = "")
```

```{r}
# bt_tst2 <- bt_tst |> 
#   split(row(bt_tst)[, 1])
# 
# purrr::map2(
#   bt_tst2,
#   seq_along(bt_tst2),
#   \(.x, .y)
#   {
#     p <- as.integer(.y - 1)
#     .x$tst_1 = ifelse(.y > 1, bt_tst2[[p]]$rn, NA)
#     .x$tst_2 = ifelse(.y > 1, .x$tst_1 + 10, NA)
# 
#     return(as.tibble(.x))
#   }) |>
#   dplyr::bind_rows()
```

```{r}
dbDisconnect(con, shutdown=TRUE)
```

```{r}
data("managers")
#head(managers[,1,drop=FALSE])
#head(managers)
PerformanceAnalytics::SharpeRatio(
  managers[,1,drop=FALSE], 
  Rf = .35/12, 
  FUN = "StdDev")
```

### Stock Charts Section

```{r}
mnthly_spy_tmp <- result |>
  rename(Date = dt, SPY.Open = open, SPY.High = high, SPY.Low = low, SPY.Close = close) |>
  select(Date, SPY.Open, SPY.High, SPY.Low, SPY.Close)

# mnthly_spy_xts <- xts(mnthly_spy_tmp[,-1], order.by = as.POSIXct(mnthly_spy_tmp[[1]]))
mnthly_spy_xts <- xts(mnthly_spy_tmp[,-1], order.by = mnthly_spy_tmp[[1]])

fltr_spy_tmp <- mnthly_spy_tmp |>
  filter((SPY.Close - SPY.Low) / (SPY.High - SPY.Low) < 0.15)

# fltr_spy_xts <- xts(fltr_spy_tmp[,-1], order.by = as.POSIXct(fltr_spy_tmp[[1]]))
fltr_spy_xts <- xts(fltr_spy_tmp[,-1], order.by = fltr_spy_tmp[[1]])

mnthly_spy.open.trade <- mnthly_spy_xts[lubridate::month(index(mnthly_spy_xts)) == 2]
mnthly_spy.close.trade <- mnthly_spy_xts[lubridate::month(index(mnthly_spy_xts)) == 9]

rm(mnthly_spy_tmp, fltr_spy_tmp)
```

```{r}
mnthly_spy.sma.5 <- round(SMA(Cl(mnthly_spy_xts), n = 5), 2)
mnthly_spy.rsi.14 <- round(RSI(Cl(mnthly_spy_xts)), 2)
mnthly_spy.rsi.oversold <- xts(rep(70, NROW(mnthly_spy_xts)), index (mnthly_spy_xts))
mnthly_spy.rsi.overbought <- xts(rep(30, NROW(mnthly_spy_xts)), index (mnthly_spy_xts))
```

```{r}
# keys <- c("Symbol: ", "Open: ", "High: ", "Low: ", "Close: ")
# values <- c(sprintf("{%s}", "series.name"),
#             sprintf("{%s:.2f}",
#                     c("point.open", "point.high", "point.low", "point.close")))
# tool_tip <- tooltip_table(keys, values)

highchart(type = "stock") |>
  hc_title(text = "SPY - Monthly") |>
  hc_add_theme(hc_theme_hcrt()) |>
  # hc_yAxis(type = "logarithmic", showLastLabel = TRUE) |>
  hc_rangeSelector(selected = 1, buttons = list(
    list(type = 'year', count = 5, text = '5y'),
    list(type = 'year', count = 10, text = '10y'),
    list(type = 'year', count = 15, text = '15y'),
    list(type = 'all', text = 'All'))) |>
  # hc_tooltip(useHTML = TRUE,
  #            headerFormat = "{pointer.key}",
  #            pointFormat = tool_tip,
  #            distance = 10) |>
  hc_navigator(height = 0) |>
  hc_add_series(mnthly_spy.open.trade$SPY.Low * 0.95, yAxis = 0, name = "Open Trade", type = "scatter", color = "green", marker = list(symbol = "triangle")) |>
  hc_add_series(mnthly_spy.close.trade$SPY.High * 1.05, yAxis = 0, name = "Open Trade", type = "scatter", color = "red", marker = list(symbol = "triangle-down")) |>
  hc_add_series(mnthly_spy.sma.5, id = 3, yAxis = 0, name = "SMA(5)", color = hex_to_rgba("violet", 0.5)) |>
  hc_add_series(mnthly_spy_xts, 
                id = 1, 
                dataGrouping = list(enabled = FALSE),
                color = "black", lineColor = "black",
                tooltip = list(pointFormat = paste0(
                    "Open: {point.open} <br/>",
                    "High: {point.high} <br/>",
                    "Low: {point.low} <br/>",
                    "Close: {point.close} <br/>")),
                yAxis = 0
              ) |>
  hc_add_series(fltr_spy_xts, id = 2, yAxis = 0, 
                dataGrouping = list(enabled = FALSE), 
                color = "orange", lineColor = "orange", 
                tooltip = list(pointFormat = paste0("Closed < 15% of Range"))
  ) |>
  hc_add_yAxis(nid = 1L, title = list(text = "Prices"), 
               relative = 3, type = "logarithmic") |>
  hc_add_series(mnthly_spy.rsi.14, yAxis = 1, name = "Oscillator", color = "cyan") |>
  hc_add_series(mnthly_spy.rsi.oversold, yAxis = 1, name = "Oversold", color = hex_to_rgba("black", 0.7)) |>
  hc_add_series(mnthly_spy.rsi.overbought, yAxis = 1, name = "Overbought", color = hex_to_rgba("black", 0.7)) |>
  hc_add_yAxis(nid = 2L, title = list(text = "RSI(14)"), relative = 1)
```

## Backtest Charts

```{r}
sourceCpp("src/macd.cpp")
# view(bt_metrics$data_series)

chart_data <- bt_metrics$data_series |>
  mutate(#SPY.Trade.Open = ifelse(as.logical(trd_entry), low * .95, NA),
         #SPY.Trade.Close = ifelse(as.logical(trd_exit), high * 1.05, NA),
         macdTbl(close, 12, 26, 9),
         Zero = 0) |>
  rename(Date = dt, SPY.Open = open, SPY.High = high, SPY.Low = low,
         SPY.Close = close, 
         # SPY.Dividend = dividend,
         # SPY.Equity = eqty, SPY.BuyAndHold = bnh_eqty,
         # SPY.Drawdown = drawdn,
         SPY.MACD = MACD, SPY.MACD.Signal = Signal, SPY.MACD.Hist = Histogram
         ) |>
  select(Date, SPY.Open, SPY.High, SPY.Low, SPY.Close,
         # SPY.Trade.Open, SPY.Trade.Close, SPY.Equity, SPY.Drawdown,
         # SPY.BuyAndHold, 
         SPY.MACD, SPY.MACD.Signal, SPY.MACD.Hist,
         Zero
         ) |>
  arrange(Date) # |>
  #as.xts()
# view(chart_data)

 

# Convert Date to milliseconds since epoch
chart_data <- chart_data |>
  mutate(Date = datetime_to_timestamp(as.POSIXct(Date, tz = "UTC")))

# open_trades <- chart_data |>
#   filter(!is.na(SPY.Trade.Open))
# 
# close_trades <- chart_data |>
#   filter(!is.na(SPY.Trade.Close))

highchart(type = "stock") |>
  hc_title(text = "SPY - Backtest") |>
  hc_add_theme(hc_theme_hcrt()) |>
  hc_rangeSelector(selected = 1, buttons = list(
    list(type = 'year', count = 1, text = '1y'),
    list(type = 'year', count = 5, text = '5y'),
    list(type = 'year', count = 10, text = '10y'),
    list(type = 'year', count = 15, text = '15y'),
    list(type = 'all', text = 'All'))) |>
  hc_add_series(data = chart_data, hcaes(x = Date, y = SPY.MACD), yAxis = 0, name = "MACD",
                type = "line", color = "cyan") |>
  hc_add_series(data = chart_data, hcaes(x = Date, y = SPY.MACD.Signal), yAxis = 0, name = "Signal",
                color = hex_to_rgba("black", 0.7)) |>
  # hc_add_series(data = chart_data, hcaes(x = Date, y = Zero), yAxis = 0, name = "Zero",
  #               color = hex_to_rgba("black", 0.7)) |>
  hc_add_yAxis(nid = 1L, title = list(text = "MACD"), relative = 1) |>
  # hc_add_series(data = open_trades, hcaes(x = Date, y = SPY.Trade.Open), yAxis = 1, name = "Open Trade", 
  #               type = "scatter", color = "green", 
  #               marker = list(symbol = "triangle"),
  #               tooltip = list(pointFormat = NULL)) |>
  # hc_add_series(data = close_trades, hcaes(x = Date, y = SPY.Trade.Close), yAxis = 1, name = "Close Trade", 
  #               type = "scatter", color = "red", 
  #               marker = list(symbol = "triangle-down"),
  #               tooltip = list(pointFormat = NULL)) |>
  hc_add_series(data = chart_data,
                mapping = hcaes(x = Date, 
                                open = SPY.Open, 
                                high = SPY.High, 
                                low = SPY.Low, 
                                close = SPY.Close),
                type = "candlestick",
                yAxis = 1,
                id = 1,
                dataGrouping = list(enabled = FALSE),
                color = "black", lineColor = "black",
                name = "SPY",
                tooltip = list(
                  pointFormatter = JS("function() { return '<span style=\"color:' + this.series.lineColor + '\">●</span> <b>' + this.series.name + '</b><br/>Open: <b>' + new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.open) + '</b> <br/>High: <b>' + new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.high) + '</b> <br/>Low: <b>' + new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.low) + '</b> <br/>Close: <b>' + new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.close) + '</b> <br/>'; }")
                )
              ) |>
  hc_add_yAxis(nid = 2L, title = list(text = "Prices"), 
               relative = 3, type = "logarithmic") #|>
  # hc_add_series(data = chart_data, hcaes(x = Date, y = SPY.Equity), yAxis = 2, name = "Equity", 
  #               type = "area",
  #               color = "green",
  #               negativeColor = "red",
  #               threshold = 10000, opacity = 0.75,
  #               tooltip = list(
  #                 pointFormatter = JS("function() { return '<span style=\"color:' + this.series.color + ';\">●</span>' + this.series.name + ': ' + '<b>' +  new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.y) + '</b>'; }")
  #              )) |>
  # hc_add_series(data = chart_data, hcaes(x = Date, y = SPY.BuyAndHold), yAxis = 2, name = "Buy & Hold",
  #               color = "blue", type = "line",
  #               tooltip = list(
  #                 pointFormatter = JS("function() { return '<span style=\"color:' + this.series.color + ';\">●</span>' + this.series.name + ': ' + '<b>' +  new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.y) + '</b>'; }"))
  #               ) |>
  # hc_add_yAxis(nid = 3L, title = list(text = "Equity"), relative = 1) |>
  # hc_add_series(data = chart_data, hcaes(x = Date, y = SPY.Drawdown), yAxis = 3, name = "Drawdown", 
  #               color = "darkred", type = "area",
  #               tooltip = list(pointFormatter = JS("function() { return '<span style=\"color:' + this.series.color + ';\">●</span>' + this.series.name + ': ' + '<b>' + new Intl.NumberFormat('en-US', {style: 'percent', minimumFractionDigits: 2, maximumFractionDigits: 2}).format(this.y) + '</b>'; }"))
  #               ) |>
  # hc_add_yAxis(nid = 4L, title = list(text = "Drawdown"), relative = 1,
  #              labels = list(format = paste0("{value}%")))
```

```{r}
library(dplyr)
library(highcharter)

# Prepare and rename
chart_data_cgpt <- bt_metrics$data_series |>
  rename(Date = dt,
         SPY.Open = open,
         SPY.High = high,
         SPY.Low = low,
         SPY.Close = close) |>
  select(Date, SPY.Open, SPY.High, SPY.Low, SPY.Close) |>
  arrange(Date)

chart_data_cgpt <- chart_data_cgpt |> mutate(Volume = runif(n(), 1e6, 5e6))

# Convert Date to milliseconds since epoch
chart_data_cgpt <- chart_data_cgpt |>
  mutate(Date = datetime_to_timestamp(as.POSIXct(Date, tz = "UTC")))

# highchart(type = "stock") |>
#   hc_chart(zoomType = "xy") |>
#   hc_title(text = "SPY - Backtest (Candlestick)") |>
#   hc_add_theme(hc_theme_hcrt()) |>
#   hc_rangeSelector(selected = 1, buttons = list(
#     list(type = 'year', count = 1, text = '1y'),
#     list(type = 'year', count = 5, text = '5y'),
#     list(type = 'year', count = 10, text = '10y'),
#     list(type = 'year', count = 15, text = '15y'),
#     list(type = 'all', text = 'All'))) |>
#   hc_yAxis(
#     labels = list(x = -10),  # Shift labels left
#     offset = 30,             # Offset whole axis from edge
#     lineWidth = 1
#   ) |>
#   hc_add_series(data = chart_data_cgpt,
#                 mapping = hcaes(x = Date,
#                                 open = SPY.Open,
#                                 high = SPY.High,
#                                 low = SPY.Low,
#                                 close = SPY.Close),
#                 type = "candlestick",
#                 name = "SPY") |>
#   hc_tooltip(valueDecimals = 2,
#              split = TRUE,
#              shared = TRUE) |>
#   hc_exporting(
#     enabled = TRUE,
#     buttons = list(
#       contextButton = list(
#         menuItems = c("viewFullscreen", "printChart", "separator", "downloadPNG",
#                       "downloadJPEG", "downloadPDF", "downloadSVG", "separator", 
#                       "resetZoom", "resetZoomButton")
#       )
#     )
#   )

highchart(type = "stock") |>
  hc_chart(zoomType = "xy") |>
  hc_title(text = "SPY - Backtest (Candlestick with Volume Above)") |>
  hc_add_theme(hc_theme_hcrt()) |>
  hc_rangeSelector(selected = 1, buttons = list(
    list(type = 'year', count = 1, text = '1y'),
    list(type = 'year', count = 5, text = '5y'),
    list(type = 'year', count = 10, text = '10y'),
    list(type = 'year', count = 15, text = '15y'),
    list(type = 'all', text = 'All'))) |>

  # Y-Axis configuration
  hc_yAxis_multiples(
    list(  # Volume axis (top)
      height = "15%",   # Top 30%
      lineWidth = 1,
      labels = list(align = "right", x = -5),
      title = list(text = "Volume"),
      top = "0%",       # Position at top
      offset = 0
    ),
    list(  # Price axis (bottom)
      top = "15%",      # Start below the volume axis
      height = "85%",   # Use remaining space
      offset = 0,
      lineWidth = 1,
      labels = list(align = "right", x = -5),
      title = list(text = "Price")
    )
  ) |>

  # Range selector
  hc_rangeSelector(selected = 1) |>

  # Volume series (on top, yAxis = 0)
  hc_add_series(
    data = chart_data_cgpt,
    mapping = hcaes(x = Date, y = Volume),
    type = "column",
    yAxis = 0,
    name = "Volume",
    color = "#7cb5ec"
  ) |>

  # Candlestick series (on bottom, yAxis = 1)
  hc_add_series(
    data = chart_data_cgpt,
    mapping = hcaes(x = Date,
                    open = SPY.Open,
                    high = SPY.High,
                    low = SPY.Low,
                    close = SPY.Close),
    type = "candlestick",
    yAxis = 1,
    name = "SPY"
  ) |>

  # Tooltip
  hc_tooltip(valueDecimals = 2, split = TRUE, shared = TRUE)
```

```{r}
#| cache: false

# TODO:
# figure out a better lable strategy for ohlc symbol then hardcoding

# library(TTR)
# sourceCpp("src/macd.cpp")
# view(bt_metrics$data_series)

# chart_data2 <- bt_metrics$data_series |>
#   mutate(SPY.Trade.Open = ifelse(as.logical(trd_entry), low * .95, NA),
#          SPY.Trade.Close = ifelse(as.logical(trd_exit), high * 1.05, NA),
#          macdTbl(close, 12, 26, 9), 
#          Zero = 0) |>
#   rename(Date = dt, SPY.Open = open, SPY.High = high, SPY.Low = low,
#          SPY.Close = close, SPY.Dividend = dividend,
#          SPY.Equity = eqty, SPY.BuyAndHold = bnh_eqty,
#          SPY.Drawdown = drawdn,
#          SPY.MACD = MACD, SPY.MACD.Signal = Signal, SPY.MACD.Hist = Histogram) |>
#   select(Date, SPY.Open, SPY.High, SPY.Low, SPY.Close,
#          SPY.Trade.Open, SPY.Trade.Close, SPY.Equity, SPY.Drawdown,
#          SPY.BuyAndHold, SPY.MACD, SPY.MACD.Signal, SPY.MACD.Hist,
#          Zero) |>
#   as.xts()
# view(chart_data2)

# !--- Lists to create highcharter stock chart with configurable functions----!
ohlc_tooltip_js <- readChar(
  "src/js/ohlc_tooltip.js",
  file.info("src/js/ohlc_tooltip.js")$size)
currency_tooltip_js <- readChar(
  "src/js/currency_tooltip.js",
  file.info("src/js/currency_tooltip.js")$size)
percent_tooltip_js <- readChar(
  "src/js/percent_tooltip.js",
  file.info("src/js/percent_tooltip.js")$size)
axis_label_percent_js <- readChar(
  "src/js/axis_label_percent.js",
  file.info("src/js/axis_label_percent.js")$size)

# --- Dynamic Configuration Functions ---
create_yaxis_config <- function(include_technical_indicator = FALSE) {
  yaxis_list <- list()

  if (include_technical_indicator) {
    yaxis_list[["technical_indicator_axis"]] <- list(
      nid = 0L,
      title = list(text = "Technical Indicator"),
      relative = 1)
    price_axis_nid <- 1L
    equity_axis_nid <- 2L
    drawdown_axis_nid <- 3L
  } else {
    price_axis_nid <- 0L
    equity_axis_nid <- 1L
    drawdown_axis_nid <- 2L
  }

  yaxis_list[["price_axis"]] <- list(
    nid = price_axis_nid,
    title = list(text = "Prices"),
    relative = 3,
    type = "logarithmic")
  yaxis_list[["equity_axis"]] <- list(
    nid = equity_axis_nid,
    title = list(text = "Equity"),
    relative = 1)
  yaxis_list[["drawdown_axis"]] <- list(
    nid = drawdown_axis_nid,
    title = list(text = "Drawdown"),
    relative = 1,
    labels = list(formatter = JS(axis_label_percent_js))
  )

  attr(yaxis_list, "price_axis_nid") <- price_axis_nid # Store NID as an attribute for easy lookup
  return(yaxis_list)
}

create_series_config <- function(
    chart_data,
    technical_indicator_series = NULL,
    optional_price_series = NULL) {
  series_list <- list()
  y_axis_offset <- 0L # Initialize offset

  # --- Add Technical Indicator Series (if any) ---
  # These come first and potentially shift the axis NIDs for others
  if (!is.null(technical_indicator_series)) {
    y_axis_offset <- 1L # Shift yAxis indices for OHLC, Equity, Drawdown if technical indicator is present
    # Add technical indicator series
    for (series_name in names(technical_indicator_series)) {
      series_list[[series_name]] <- technical_indicator_series[[series_name]]
    }
  }

  # Determine the correct NID for the price axis based on the offset
  price_axis_nid <- 0L + y_axis_offset

  # --- Add Standard Price Axis Series ---
  # Ensure column names match your actual chart_data xts object
  # Example column names used here: "SPY.Trade.Open", "SPY.Open", etc.
  series_list[["trade_open_series"]] <- list(
    data = chart_data[,"SPY.Trade.Open"],
    yAxis = price_axis_nid,
    name = "Open Trade",
    type = "scatter",
    color = "green",
    marker = list(symbol = "triangle"),
    tooltip = list(pointFormat = NULL)
  )
  series_list[["trade_close_series"]] <- list(
    data = chart_data[,"SPY.Trade.Close"],
    yAxis = price_axis_nid,
    name = "Close Trade",
    type = "scatter",
    color = "red",
    marker = list(symbol = "triangle-down"),
    tooltip = list(pointFormat = NULL)
  )
  series_list[["ohlc_series"]] <- list(
    data = chart_data[,c("SPY.Open", "SPY.High", "SPY.Low", "SPY.Close")],
    yAxis = price_axis_nid,
    id = 1,
    dataGrouping = list(enabled = FALSE),
    color = "black",
    lineColor = "black",
    name = "SPY",
    tooltip = list(pointFormatter = JS(ohlc_tooltip_js))
  )


  # --- Add Optional Price Axis Series (if any) ---
  # These are added AFTER the standard price axis series
  if (!is.null(optional_price_series)) {
    for (series_name in names(optional_price_series)) {
      current_series_config <- optional_price_series[[series_name]]
      # Ensure the optional series are assigned to the correct price axis NID
      current_series_config$yAxis <- price_axis_nid
      series_list[[series_name]] <- current_series_config
    }
  }

  # --- Add Other Standard Series ---
  # These use yAxis indices relative to the offset as before
  # Ensure column names match your actual chart_data xts object
  series_list[["equity_series"]] <- list(
    data = chart_data[,"SPY.Equity"],
    yAxis = 1L + y_axis_offset,
    name = "Equity",
    type = "area",
    color = "green",
    negativeColor = "red",
    threshold = 10000,
    opacity = 0.75,
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  )
  series_list[["buy_and_hold_series"]] <- list(
    data = chart_data[,"SPY.BuyAndHold"],
    yAxis = 1L + y_axis_offset,
    name = "Buy & Hold",
    color = "blue",
    type = "line",
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  )
  series_list[["drawdown_series"]] <- list(
    data = chart_data[,"SPY.Drawdown"],
    yAxis = 2L + y_axis_offset,
    name = "Drawdown",
    color = "darkred",
    type = "area",
    tooltip = list(pointFormatter = JS(percent_tooltip_js))
  )

  series_list
}


# --- Chart Building Logic ---

build_stock_chart <- function(
    chart_data, 
    chart_title = "Backtest",
    chart_theme = hc_theme_hcrt(),
    technical_indicator_config = NULL,
    optional_price_series_config = NULL) {
  # Determine if we should include the axis
  include_technical_indicator <- !is.null(technical_indicator_config) 

  hc <- highchart(type = "stock") |>
    hc_title(text = chart_title) |>
    hc_add_theme(chart_theme) |>
    hc_rangeSelector(selected = 1, buttons = list(
      list(type = 'year', count = 1, text = '1y'),
      list(type = 'year', count = 5, text = '5y'),
      list(type = 'year', count = 10, text = '10y'),
      list(type = 'year', count = 15, text = '15y'),
      list(type = 'all', text = 'All')))

  # Pass the optional_price_series_config to create_series_config
  yaxis_config <- create_yaxis_config(include_technical_indicator)
  series_config <- create_series_config(
    chart_data,
    technical_indicator_series = technical_indicator_config,
    optional_price_series = optional_price_series_config)


  # Add y-axes first
  for (axis_name in names(yaxis_config)) {
    if (!inherits(yaxis_config[[axis_name]], "list")) next # Skip attributes etc.
    hc <- add_yaxis_hc(hc, yaxis_config[[axis_name]])
  }

  # Add series
  for (series_name in names(series_config)) {
    hc <- add_series_hc(hc, series_config[[series_name]])
  }

  hc
}

# --- Example Usage ---

# Define MACD technical indicator configuration
macd_indicator_config <- list(
  macd_series = list(
    data = chart_data[,"SPY.MACD"],
    yAxis = 0L,
    name = "MACD",
    type = "line",
    color = "cyan"),
  signal_series = list(
    data = chart_data[,"SPY.MACD.Signal"],
    yAxis = 0L,
    name = "Signal",
    color = hex_to_rgba("black", 0.7)),
  zero_series = list(
    data = chart_data[,"Zero"],
    yAxis = 0L,
    name = "Zero",
    color = hex_to_rgba("black", 0.7)
  )
)

# Example: Calculate data for two moving averages using quantmod
# quantmod::SMA expects an xts object
chart_data$SPY.MA_50 <- TTR::SMA(chart_data$SPY.Close, n = 50)
chart_data$SPY.MA_200 <- TTR::SMA(chart_data$SPY.Close, n = 200)

# Define the configuration for the optional price series
# The user does NOT need to specify yAxis here
my_optional_price_series <- list(
  ma_50_series = list(
    data = chart_data$SPY.MA_50, 
    name = "50 SMA", 
    type = "line", 
    color = "orange", 
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  ),
  ma_200_series = list(
    data = chart_data$SPY.MA_200, 
    name = "200 SMA", 
    type = "line", 
    color = "purple", 
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  )
)

# Chart with MACD technical indicator
chart_with_ma_macd <- build_stock_chart(
  chart_data,
  "SPY - Backtest",
  hc_theme_hcrt(),
  technical_indicator_config = macd_indicator_config,
  optional_price_series_config = my_optional_price_series)

chart_with_ma_macd
```

### TODO

```{r}
# Refactoring data column names

# TODO:
# refactor into backtesting functions

library(TTR)
sourceCpp("src/macd.cpp")
# view(bt_metrics$data_series)

chart_data2 <- bt_metrics$data_series |>
  mutate(Trade.Open = ifelse(as.logical(trd_entry), low * .95, NA),
         Trade.Close = ifelse(as.logical(trd_exit), high * 1.05, NA)) |>
  rename(Date = dt, Open = open, High = high, Low = low,
         Close = close, Dividend = dividend,
         Equity = eqty, BuyAndHold = bnh_eqty,
         Drawdown = drawdn) |>
  select(Date, Open, High, Low, Close,
         Trade.Open, Trade.Close, Equity, Drawdown, BuyAndHold) |>
  as.xts()
# view(chart_data2)

# !--- Lists to create highcharter stock chart with configurable functions----!
ohlc_tooltip_js <- readChar(
  "src/js/ohlc_tooltip.js",
  file.info("src/js/ohlc_tooltip.js")$size)
currency_tooltip_js <- readChar(
  "src/js/currency_tooltip.js",
  file.info("src/js/currency_tooltip.js")$size)
percent_tooltip_js <- readChar(
  "src/js/percent_tooltip.js",
  file.info("src/js/percent_tooltip.js")$size)
axis_label_percent_js <- readChar(
  "src/js/axis_label_percent.js",
  file.info("src/js/axis_label_percent.js")$size)

# --- Dynamic Configuration Functions ---
create_yaxis_config <- function(include_technical_indicator = FALSE) {
  yaxis_list <- list()

  if (include_technical_indicator) {
    yaxis_list[["technical_indicator_axis"]] <- list(
      nid = 0L,
      title = list(text = "Indicator"),
      relative = 1)
    price_axis_nid <- 1L
    equity_axis_nid <- 2L
    drawdown_axis_nid <- 3L
  } else {
    price_axis_nid <- 0L
    equity_axis_nid <- 1L
    drawdown_axis_nid <- 2L
  }

  yaxis_list[["price_axis"]] <- list(
    nid = price_axis_nid,
    title = list(text = "Prices"),
    relative = 3,
    type = "logarithmic")
  yaxis_list[["equity_axis"]] <- list(
    nid = equity_axis_nid,
    title = list(text = "Equity"),
    relative = 1)
  yaxis_list[["drawdown_axis"]] <- list(
    nid = drawdown_axis_nid,
    title = list(text = "Drawdown"),
    relative = 1,
    labels = list(formatter = JS(axis_label_percent_js))
  )

  attr(yaxis_list, "price_axis_nid") <- price_axis_nid # Store NID as an attribute for easy lookup
  return(yaxis_list)
}

create_series_config <- function(
    chart_data,
    technical_indicator_series = NULL,
    optional_price_series = NULL) {
  series_list <- list()
  y_axis_offset <- 0L # Initialize offset

  # --- Add Technical Indicator Series (if any) ---
  # These come first and potentially shift the axis NIDs for others
  if (!is.null(technical_indicator_series)) {
    y_axis_offset <- 1L # Shift yAxis indices for OHLC, Equity, Drawdown if technical indicator is present
    # Add technical indicator series
    for (series_name in names(technical_indicator_series)) {
      series_list[[series_name]] <- technical_indicator_series[[series_name]]
    }
  }

  # Determine the correct NID for the price axis based on the offset
  price_axis_nid <- 0L + y_axis_offset

  # --- Add Standard Price Axis Series ---
  # Ensure column names match your actual chart_data xts object
  # Example column names used here: "SPY.Trade.Open", "SPY.Open", etc.
  series_list[["trade_open_series"]] <- list(
    data = chart_data2[,"Trade.Open"],
    yAxis = price_axis_nid,
    name = "Open Trade",
    type = "scatter",
    color = "green",
    marker = list(symbol = "triangle"),
    tooltip = list(pointFormat = NULL)
  )
  series_list[["trade_close_series"]] <- list(
    data = chart_data2[,"Trade.Close"],
    yAxis = price_axis_nid,
    name = "Close Trade",
    type = "scatter",
    color = "red",
    marker = list(symbol = "triangle-down"),
    tooltip = list(pointFormat = NULL)
  )
  series_list[["ohlc_series"]] <- list(
    data = chart_data2[,c("Open", "High", "Low", "Close")],
    yAxis = price_axis_nid,
    id = 1,
    dataGrouping = list(enabled = FALSE),
    color = "black",
    lineColor = "black",
    name = "SPY",
    tooltip = list(pointFormatter = JS(ohlc_tooltip_js))
  )


  # --- Add Optional Price Axis Series (if any) ---
  # These are added AFTER the standard price axis series
  if (!is.null(optional_price_series)) {
    for (series_name in names(optional_price_series)) {
      current_series_config <- optional_price_series[[series_name]]
      # Ensure the optional series are assigned to the correct price axis NID
      current_series_config$yAxis <- price_axis_nid
      series_list[[series_name]] <- current_series_config
    }
  }

  # --- Add Other Standard Series ---
  # These use yAxis indices relative to the offset as before
  # Ensure column names match your actual chart_data xts object
  series_list[["equity_series"]] <- list(
    data = chart_data2[,"Equity"],
    yAxis = 1L + y_axis_offset,
    name = "Equity",
    type = "area",
    color = "green",
    negativeColor = "red",
    threshold = 10000,
    opacity = 0.75,
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  )
  series_list[["buy_and_hold_series"]] <- list(
    data = chart_data2[,"BuyAndHold"],
    yAxis = 1L + y_axis_offset,
    name = "Buy & Hold",
    color = "blue",
    type = "line",
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  )
  series_list[["drawdown_series"]] <- list(
    data = chart_data2[,"Drawdown"],
    yAxis = 2L + y_axis_offset,
    name = "Drawdown",
    color = "darkred",
    type = "area",
    tooltip = list(pointFormatter = JS(percent_tooltip_js))
  )

  series_list
}


# --- Chart Building Logic ---

build_stock_chart <- function(
    chart_data, 
    chart_title = "Backtest",
    chart_theme = hc_theme_hcrt(),
    technical_indicator_config = NULL,
    optional_price_series_config = NULL) {
  # Determine if we should include the axis
  include_technical_indicator <- !is.null(technical_indicator_config) 

  hc <- highchart(type = "stock") |>
    hc_title(text = chart_title) |>
    hc_add_theme(chart_theme) |>
    hc_rangeSelector(selected = 1, buttons = list(
      list(type = 'year', count = 1, text = '1y'),
      list(type = 'year', count = 5, text = '5y'),
      list(type = 'year', count = 10, text = '10y'),
      list(type = 'year', count = 15, text = '15y'),
      list(type = 'all', text = 'All'))) |>
    hc_navigator(height = 0)

  # Pass the optional_price_series_config to create_series_config
  yaxis_config <- create_yaxis_config(include_technical_indicator)
  series_config <- create_series_config(
    chart_data2,
    technical_indicator_series = technical_indicator_config,
    optional_price_series = optional_price_series_config)


  # Add y-axes first
  for (axis_name in names(yaxis_config)) {
    if (!inherits(yaxis_config[[axis_name]], "list")) next # Skip attributes etc.
    hc <- add_yaxis_hc(hc, yaxis_config[[axis_name]])
  }

  # Add series
  for (series_name in names(series_config)) {
    hc <- add_series_hc(hc, series_config[[series_name]])
  }

  hc
}

# --- Example Usage ---
macd_data <- macd(chart_data2$Close, 12, 26, 9)
# macd_data <- macd(bt_metrics$data_series$close, 12, 26, 9)
chart_data2$MACD <- macd_data$MACD
chart_data2$MACD.Signal <- macd_data$Signal
chart_data2$Zero <- macd_data$Zero
rm(macd_data)

# Define MACD technical indicator configuration
macd_indicator_config <- list(
  macd_series = list(
    data = chart_data2[,"MACD"],
    yAxis = 0L,
    name = "MACD",
    type = "line",
    color = "cyan"),
  signal_series = list(
    data = chart_data2[,"MACD.Signal"],
    yAxis = 0L,
    name = "Signal",
    color = hex_to_rgba("black", 0.7)),
  zero_series = list(
    data = chart_data2[,"Zero"],
    yAxis = 0L,
    color = hex_to_rgba("black", 0.7),
    tooltip = list(enabled = FALSE, pointFormat = NULL)
  )
)

# Example: Calculate data for two moving averages using quantmod
# quantmod::SMA expects an xts object
# chart_data2$MA_24 <- TTR::SMA(chart_data2$Close, n = 24)
chart_data2$MA_48 <- TTR::SMA(chart_data2$Close, n = 48)

# Define the configuration for the optional price series
# The user does NOT need to specify yAxis here
my_optional_price_series <- list(
  ma_50_series = list(
    data = TTR::SMA(chart_data2$Close, n = 24),
    name = "24 SMA", 
    type = "line", 
    color = "orange", 
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  ),
  ma_200_series = list(
    data = chart_data2$MA_48, 
    name = "48 SMA", 
    type = "line", 
    color = "purple", 
    tooltip = list(pointFormatter = JS(currency_tooltip_js))
  )
)

# Chart with MACD technical indicator
chart_with_ma_macd2 <- build_stock_chart(
  chart_data2,
  "SPY - Backtest",
  hc_theme_hcrt(),
  technical_indicator_config = macd_indicator_config,
  optional_price_series_config = my_optional_price_series)

chart_with_ma_macd2
```

```{r}
rm(chart_data3)
chart_data3 <- bt_metrics$data_series |>
  mutate(
    macdTbl(close, 12, 26, 9),
    MA_24 = as.vector(TTR::SMA(close, n = 24)),
    MA_48 = as.vector(TTR::SMA(close, n = 48)))

view(chart_data3)
```

### Refactor

#### Y-Axis Config

```{r}
ohlc_tooltip_js_str <- "function() { return '<b>' + this.series.name + '</b><br/>' + Highcharts.dateFormat('%A, %b %e, %Y', this.x) + '<br/>Open: ' + this.point.open + '<br/>High: ' + this.point.high + '<br/>Low: ' + this.point.low + '<br/>Close: ' + this.point.close; }"
currency_tooltip_js_str <- "function() { return '<b>' + this.series.name + '</b><br/>' + Highcharts.dateFormat('%A, %b %e, %Y', this.x) + '<br/>Value: ' + Highcharts.numberFormat(this.y, 2); }"
percent_tooltip_js_str <- "function() { return '<b>' + this.series.name + '</b><br/>' + Highcharts.dateFormat('%A, %b %e, %Y', this.x) + '<br/>Value: ' + Highcharts.numberFormat(this.y * 100, 2) + '%'; }"
axis_label_percent_js_str <- "function() { return Highcharts.numberFormat(this.value * 100, 0) + '%'; }"

### Y-Axis Config Section
create_yaxis_layout <- function(include_technical_indicator_axis = FALSE) {
  yaxis_definitions <- list()
  current_nid_index <- 0L # Tracks the 0-based index for yAxis linking

  # --- Technical Indicator Axis (Optional) ---
  if (include_technical_indicator_axis) {
    yaxis_definitions[["technical_indicator_axis"]] <- list(
      # nid is for ordering and relative height calculation, not directly passed to hc_add_yAxis
      nid_order = 1, # Order in which it appears
      assigned_yaxis_index = current_nid_index,
      title = list(text = "Indicator"),
      relative_height = 1 # Proportion of total chart height
    )
    current_nid_index <- current_nid_index + 1L
  }

  # --- Price Axis ---
  yaxis_definitions[["price_axis"]] <- list(
    nid_order = 2,
    assigned_yaxis_index = current_nid_index,
    title = list(text = "Price"),
    relative_height = 3,
    type = "logarithmic" # Example: logarithmic scale for price
  )
  price_axis_actual_idx <- current_nid_index # Store for series assignment
  current_nid_index <- current_nid_index + 1L

  # --- Equity Axis ---
  yaxis_definitions[["equity_axis"]] <- list(
    nid_order = 3,
    assigned_yaxis_index = current_nid_index,
    title = list(text = "Equity"),
    relative_height = 1.5
  )
  equity_axis_actual_idx <- current_nid_index
  current_nid_index <- current_nid_index + 1L

  # --- Drawdown Axis ---
  yaxis_definitions[["drawdown_axis"]] <- list(
    nid_order = 4,
    assigned_yaxis_index = current_nid_index,
    title = list(text = "Drawdown"),
    relative_height = 1,
    labels = list(formatter = JS(axis_label_percent_js_str))
  )
  drawdown_axis_actual_idx <- current_nid_index

  # Store actual yAxis indices for series creation
  attr(yaxis_definitions, "price_axis_idx") <- price_axis_actual_idx
  attr(yaxis_definitions, "equity_axis_idx") <- equity_axis_actual_idx
  attr(yaxis_definitions, "drawdown_axis_idx") <- drawdown_axis_actual_idx
  attr(yaxis_definitions, "indicator_axis_idx") <- if(include_technical_indicator_axis) 0L else NULL


  return(yaxis_definitions)
}
```

#### Series Config

```{r}
create_series_definitions <- function(
    final_xts_data,
    price_axis_idx,
    equity_axis_idx,
    drawdown_axis_idx,
    indicator_axis_idx = NULL, # Will be 0 if present
    technical_indicator_configs = NULL,
    optional_price_series_configs = NULL) {

  all_series <- list()

  # --- Technical Indicator Series ---
  if (!is.null(technical_indicator_configs) && !is.null(indicator_axis_idx)) {
    for (series_key in names(technical_indicator_configs)) {
      cfg <- technical_indicator_configs[[series_key]]
      col_name <- cfg$data_col_name # This name must exist in final_xts_data
      if (!col_name %in% colnames(final_xts_data)) {
        warning(paste("Column '", col_name, "' for tech indicator '", series_key, "' not found in XTS data. Skipping.", sep=""))
        next
      }
      all_series[[series_key]] <- list(
        name = cfg$name,
        type = cfg$type,
        data = final_xts_data[, col_name],
        yAxis = indicator_axis_idx, # Should be 0
        color = cfg$color,
        lineWidth = cfg$lineWidth, # Optional: provide in config
        dashStyle = cfg$dashStyle, # Optional: provide in config
        tooltip = cfg$tooltip      # Optional: provide in config (e.g., list(enabled=FALSE))
        # Ensure all sub-lists like tooltip are fully named if provided
      )
    }
  }

  # --- Standard Price Chart Series ---
  all_series[["ohlc"]] <- list(
    type = "candlestick", # More common for OHLC
    name = "Price", # Or get from ticker
    data = final_xts_data[, c("Open", "High", "Low", "Close")],
    yAxis = price_axis_idx,
    color = "red", # Down candle
    upColor = "green", # Up candle
    lineColor = "black", # Wick for down
    upLineColor = "black", # Wick for up
    dataGrouping = list(enabled = FALSE),
    tooltip = list(pointFormatter = JS(ohlc_tooltip_js_str))
  )
  all_series[["trade_open_markers"]] <- list(
    type = "scatter", name = "Trade Open",
    data = final_xts_data[, "Trade.Open"],
    yAxis = price_axis_idx, color = "rgba(0,128,0,0.7)", # Green
    marker = list(symbol = "triangle", radius = 5),
    tooltip = list(headerFormat = '<b>{series.name}</b><br>', pointFormat = '{point.x:%A, %b %e, %Y}: {point.y}')
  )
  all_series[["trade_close_markers"]] <- list(
    type = "scatter", name = "Trade Close",
    data = final_xts_data[, "Trade.Close"],
    yAxis = price_axis_idx, color = "rgba(255,0,0,0.7)", # Red
    marker = list(symbol = "triangle-down", radius = 5),
    tooltip = list(headerFormat = '<b>{series.name}</b><br>', pointFormat = '{point.x:%A, %b %e, %Y}: {point.y}')
  )

  # --- Optional Price Chart Series (e.g., SMAs) ---
  if (!is.null(optional_price_series_configs)) {
    for (series_key in names(optional_price_series_configs)) {
      cfg <- optional_price_series_configs[[series_key]]
      col_name <- cfg$data_col_name
      if (!col_name %in% colnames(final_xts_data)) {
        warning(paste("Column '", col_name, "' for optional series '", series_key, "' not found in XTS data. Skipping.", sep=""))
        next
      }
      all_series[[series_key]] <- list(
        name = cfg$name,
        type = cfg$type,
        data = final_xts_data[, col_name],
        yAxis = price_axis_idx,
        color = cfg$color,
        lineWidth = cfg$lineWidth,
        tooltip = cfg$tooltip # User provides the full tooltip list, e.g. list(pointFormatter = JS(...))
      )
    }
  }

  # --- Equity and Drawdown Series ---
  all_series[["equity_curve"]] <- list(
    type = "area", name = "Strategy Equity",
    data = final_xts_data[, "Equity"],
    yAxis = equity_axis_idx, color = "rgba(0,128,0,0.6)", # Greenish
    negativeColor = "rgba(255,0,0,0.4)", # Reddish for below threshold
    threshold = if(nrow(final_xts_data) > 0 && "Equity" %in% colnames(final_xts_data) && !is.na(coredata(final_xts_data[1,"Equity"]))) as.numeric(coredata(final_xts_data[1,"Equity"])) else 100000,
    tooltip = list(pointFormatter = JS(currency_tooltip_js_str))
  )
  all_series[["buy_and_hold_equity"]] <- list(
    type = "line", name = "Buy & Hold Equity",
    data = final_xts_data[, "BuyAndHold"],
    yAxis = equity_axis_idx, color = "rgba(0,0,255,0.7)", # Blue
    tooltip = list(pointFormatter = JS(currency_tooltip_js_str))
  )
  all_series[["drawdown_chart"]] <- list(
    type = "area", name = "Drawdown",
    data = final_xts_data[, "Drawdown"],
    yAxis = drawdown_axis_idx, color = "rgba(139,0,0,0.6)", # Dark Red
    fillOpacity = 0.5,
    tooltip = list(pointFormatter = JS(percent_tooltip_js_str))
  )
  
  # Clean up NULL parameters from each series definition
  # and ensure all sub-lists (like tooltip, marker) are fully named.
  for (s_name in names(all_series)) {
    all_series[[s_name]] <- Filter(Negate(is.null), all_series[[s_name]])
    # Basic check for named sub-lists - add more if needed
    for (sub_list_name in c("tooltip", "marker", "dataGrouping")) {
        if (!is.null(all_series[[s_name]][[sub_list_name]])) {
            sub_l <- all_series[[s_name]][[sub_list_name]]
            if (is.list(sub_l) && length(sub_l) > 0 && (is.null(names(sub_l)) || any(nchar(names(sub_l)) == 0))) {
                stop(paste("Sub-list '", sub_list_name, "' in series '", s_name, "' has unnamed or empty-named elements."))
            }
        }
    }
  }

  return(all_series)
}
```

#### Main Chart

```{r}
build_stock_performance_chart <- function(
    input_data_tibble, # e.g., bt_metrics$data_series
    chart_main_title = "Stock Performance Chart",
    highcharts_theme = hc_theme_smpl(), # A default theme
    technical_indicator_configs = NULL, # User provides list with data vectors & col names
    optional_price_series_configs = NULL # User provides list with data vectors & col names
) {
  # --- 1. Prepare Data (Tibble to XTS) ---
  # Start with a copy to avoid modifying the original
  chart_tibble <- as_tibble(input_data_tibble)

  # Standard column transformations
  chart_tibble <- chart_tibble |>
    mutate(
      # Ensure logical for ifelse, and NA_real_ for numeric NAs
      Trade.Open = ifelse(as.logical(trd_entry) & !is.na(low), low * 0.99, NA_real_),
      Trade.Close = ifelse(as.logical(trd_exit) & !is.na(high), high * 1.01, NA_real_)
    ) |>
    rename(
      Date = dt, Open = open, High = high, Low = low, Close = close,
      Equity = eqty, BuyAndHold = bnh_eqty, Drawdown = drawdn
      # Dividend = dividend # Uncomment if 'dividend' column exists and is needed
    )

  # Integrate technical indicator data vectors
  if (!is.null(technical_indicator_configs)) {
    for (config_item_name in names(technical_indicator_configs)) {
      config <- technical_indicator_configs[[config_item_name]]
      col_name <- config$data_col_name
      data_vec <- config$data
      if (length(data_vec) == nrow(chart_tibble)) {
        chart_tibble[[col_name]] <- data_vec
      } else {
        warning(paste("Length mismatch for tech. indicator '", config_item_name, "'. Skipping.", sep = ""))
      }
    }
  }

  # Integrate optional price series data vectors
  if (!is.null(optional_price_series_configs)) {
    for (config_item_name in names(optional_price_series_configs)) {
      config <- optional_price_series_configs[[config_item_name]]
      col_name <- config$data_col_name
      data_vec <- config$data
      if (length(data_vec) == nrow(chart_tibble)) {
        chart_tibble[[col_name]] <- data_vec
      } else {
        warning(paste("Length mismatch for opt. series '", config_item_name, "'. Skipping.", sep = ""))
      }
    }
  }

  # Define all columns expected in the final XTS object
  # Start with standard ones, then add custom ones
  xts_col_names <- c("Date", "Open", "High", "Low", "Close", "Trade.Open", "Trade.Close",
                     "Equity", "BuyAndHold", "Drawdown")
  # if ("Dividend" %in% names(chart_tibble)) xts_col_names <- c(xts_col_names, "Dividend")


  if (!is.null(technical_indicator_configs)) {
    xts_col_names <- c(xts_col_names, sapply(technical_indicator_configs, `[[`, "data_col_name"))
  }
  if (!is.null(optional_price_series_configs)) {
    xts_col_names <- c(xts_col_names, sapply(optional_price_series_configs, `[[`, "data_col_name"))
  }
  xts_col_names <- unique(Filter(function(x) x %in% names(chart_tibble), xts_col_names))


  # Convert to XTS, ensuring Date is the index
  if (!"Date" %in% names(chart_tibble)) stop("Missing 'Date' column for XTS conversion.")
  
  # Ensure Date is POSIXct or Date class
  if (!inherits(chart_tibble$Date, c("Date", "POSIXct"))) {
      chart_tibble$Date <- as.Date(chart_tibble$Date) # Or as.POSIXct if time is relevant
      warning("Converted 'Date' column to Date class for XTS conversion.")
  }
  
  # Select only existing columns for XTS
  final_xts <- xts(chart_tibble[, setdiff(xts_col_names, "Date")], order.by = chart_tibble$Date)


  # --- 2. Initialize Highchart ---
  hc <- highchart(type = "stock") |>
    hc_title(text = chart_main_title) |>
    hc_add_theme(highcharts_theme) |>
    hc_exporting(enabled = TRUE) |>
    hc_rangeSelector(selected = 4, buttons = list( # Default to '1y' or similar
        list(type = 'month', count = 6, text = '6m'),
        list(type = 'year', count = 1, text = '1y'),
        list(type = 'year', count = 3, text = '3y'),
        list(type = 'year', count = 5, text = '5y'),
        list(type = 'all', text = 'All')
    )) |>
    hc_navigator(enabled = TRUE, height = 40) |>
    hc_scrollbar(enabled = TRUE)

  # --- 3. Add Y-Axes ---
  yaxis_layout_config <- create_yaxis_layout(
    include_technical_indicator_axis = !is.null(technical_indicator_configs)
  )
  
  # Filter out attributes, keep only axis definitions
  actual_yaxis_definitions <- Filter(is.list, yaxis_layout_config)
  # Sort by nid_order to ensure correct height/top calculation and addition order
  sorted_yaxis_defs <- actual_yaxis_definitions[order(sapply(actual_yaxis_definitions, `[[`, "nid_order"))]

  total_relative_h <- sum(sapply(sorted_yaxis_defs, `[[`, "relative_height"))
  current_top_pct <- 0

  for (axis_def_item in sorted_yaxis_defs) {
    height_pct <- (axis_def_item$relative_height / total_relative_h) * 100
    
    # Construct params for hc_add_yAxis, excluding custom helper fields
    hc_yaxis_params <- axis_def_item
    hc_yaxis_params$nid_order <- NULL
    hc_yaxis_params$relative_height <- NULL
    hc_yaxis_params$assigned_yaxis_index <- NULL # This was for series linking, not hc_add_yAxis
    
    hc_yaxis_params$height <- paste0(round(height_pct,1), "%")
    hc_yaxis_params$top <- paste0(round(current_top_pct,1), "%")
    hc_yaxis_params$offset <- 0 # Usually good for aligned axes
    
    # Filter out any NULL parameters to avoid issues
    hc_yaxis_params <- Filter(Negate(is.null), hc_yaxis_params)
    
    # Ensure all elements are named
    if (length(hc_yaxis_params) > 0 && (is.null(names(hc_yaxis_params)) || any(names(hc_yaxis_params) == ""))) {
        stop(paste("Y-axis definition (order:", axis_def_item$nid_order, ") has unnamed elements for hc_add_yAxis."))
    }
    hc <- hc_add_yAxis(hc, !!!hc_yaxis_params)
    current_top_pct <- current_top_pct + height_pct
  }

  # --- 4. Add Series ---
  series_definitions <- create_series_definitions(
    final_xts_data = final_xts,
    price_axis_idx = attr(yaxis_layout_config, "price_axis_idx"),
    equity_axis_idx = attr(yaxis_layout_config, "equity_axis_idx"),
    drawdown_axis_idx = attr(yaxis_layout_config, "drawdown_axis_idx"),
    indicator_axis_idx = attr(yaxis_layout_config, "indicator_axis_idx"),
    technical_indicator_configs = technical_indicator_configs,
    optional_price_series_configs = optional_price_series_configs
  )

  for (s_name in names(series_definitions)) {
    series_params <- series_definitions[[s_name]]
    # Ensure the list itself being passed to hc_add_series is fully named
    if (length(series_params) > 0 && (is.null(names(series_params)) || any(names(series_params) == ""))) {
        stop(paste("Series '", s_name, "' has unnamed top-level parameters."))
    }
    hc <- hc_add_series(hc, !!!series_params)
  }
  
  # --- 5. Global Tooltip Configuration ---
  hc <- hc |> hc_tooltip(
      shared = TRUE, 
      crosshairs = TRUE,
      split = FALSE, # Try with split = FALSE first for conventional shared tooltip
      valueDecimals = 2 # Default decimal places
  )

  return(hc)
}
```

#### Usage

```{r}
# --- Load Libraries ---
# library(dplyr)
# library(TTR)
# library(xts)
# library(highcharter)

# --- User: Generate Base Data (Example: Replace with your bt_metrics$data_series) ---
set.seed(42)
n_days <- 252 * 3 # 3 years of daily data
my_company_data <- tibble(
  dt = seq(as.Date("2020-01-01"), by = "day", length.out = n_days),
  open = cumsum(rnorm(n_days, mean = 0.05, sd = 1.5)) + 100,
  high = open + runif(n_days, 0.5, 2),
  low = open - runif(n_days, 0.5, 2),
  close = NA, # Will be calculated
  # dividend = 0, # If you have dividend data
  eqty = cumsum(rnorm(n_days, mean = 50, sd = 300)) + 100000,
  bnh_eqty = cumsum(rnorm(n_days, mean = 40, sd = 250)) + 100000,
  drawdn = runif(n_days, -0.15, 0),
  trd_entry = sample(c(TRUE, FALSE), n_days, replace = TRUE, prob = c(0.03, 0.97)),
  trd_exit = sample(c(TRUE, FALSE), n_days, replace = TRUE, prob = c(0.03, 0.97))
)
my_company_data$close <- my_company_data$low + (my_company_data$high - my_company_data$low) * runif(n_days)
# Ensure low is not > high, close is within high/low
my_company_data <- my_company_data |>
  mutate(
    low = pmin(open, high, low, close),
    high = pmax(open, high, low, close),
    close = pmax(low, pmin(high, close))
  )

# --- User: Calculate Indicator/Optional Series Data (as VECTORS) ---
# MACD
macd_results <- TTR::MACD(my_company_data$close, nFast = 12, nSlow = 26, nSig = 9, maType = "SMA")
macd_line_vector <- macd_results[, "macd"]
macd_signal_vector <- macd_results[, "signal"]
macd_zero_line_vector <- rep(0, nrow(my_company_data))

# SMAs
sma_20_vector <- TTR::SMA(my_company_data$close, n = 20)
sma_50_vector <- TTR::SMA(my_company_data$close, n = 50)

# --- User: Define Configurations (providing data vectors and column names) ---
my_tech_indicators <- list(
  macd_line = list(
    data_col_name = "MACD_Custom", # Name for the column in XTS
    data = macd_line_vector,       # The actual data vector
    name = "MACD (12,26,9)", type = "line", color = "dodgerblue", lineWidth = 1.5
  ),
  macd_signal = list(
    data_col_name = "Signal_Custom",
    data = macd_signal_vector,
    name = "Signal Line", type = "line", color = "darkorange", lineWidth = 1.5
  ),
  macd_zero = list(
    data_col_name = "Zero_Line_MACD",
    data = macd_zero_line_vector,
    name = "Zero", type = "line", color = "grey", lineWidth = 1, dashStyle = "shortdash",
    tooltip = list(enabled = FALSE) # Example: disable tooltip for this series
  )
)

my_optional_series <- list(
  sma20 = list(
    data_col_name = "SMA20_Price",
    data = sma_20_vector,
    name = "SMA 20", type = "line", color = "purple", lineWidth = 1,
    tooltip = list(pointFormatter = JS(currency_tooltip_js_str)) # Custom tooltip
  ),
  sma50 = list(
    data_col_name = "SMA50_Price",
    data = sma_50_vector,
    name = "SMA 50", type = "line", color = "teal", lineWidth = 1,
    tooltip = list(pointFormatter = JS(currency_tooltip_js_str))
  )
)

# --- Build and Display Chart ---
# Ensure you have a theme loaded, e.g., from highcharter::hc_theme_*
# For example: hc_theme_darkunica() or hc_theme_gridlight()
if (!exists("hc_theme_smpl")) { # Fallback if not defined
    hc_theme_smpl <- highcharter::hc_theme_elementary()
    message("Using hc_theme_elementary() as hc_theme_smpl was not found.")
}


final_stock_chart <- build_stock_performance_chart(
  input_data_tibble = my_company_data,
  chart_main_title = "My Backtest Results with Indicators",
  highcharts_theme = hc_theme_smpl(), # Use a theme you like
  technical_indicator_configs = my_tech_indicators,
  optional_price_series_configs = my_optional_series
)

final_stock_chart
```

### Backtest - Scatterplots

```{r}
#view(bt_metrics$data_trd)

x <- c("Trade #", "Profit/Loss", "Max Drawdown")  
y <- c("{point.trd_num}", "{point.x}%", "{point.y}%")   
tltip <- tooltip_table(x, y) 

hchart(bt_metrics$data_trd |> 
         mutate(trd_pnl_pct = round(trd_pnl_pct * 100, 2),
                max_trd_drawdn = round(max_trd_drawdn * 100, 2)), 
       "scatter", 
       hcaes(x = trd_pnl_pct, 
             y = max_trd_drawdn, 
             group = trd_rslt)) |>
  hc_add_theme(hc_theme_hcrt()) |>
  hc_title(text = "Backtest - PnL vs. Max Drawdown") |>
  hc_xAxis(title = list(text = "Trade Profit and Loss"),
           plotLines = list(
             list(dashStyle = "Dash", value = 0, color = "black", zIndex = 3)
           )) |>
  hc_yAxis(title = list(text = "Max Trade Drawdown")) |>
  hc_tooltip(useHTML = TRUE, pointFormat = tltip, headerFormat = paste0("<span style=\"color:{series.color}\">●</span> <b style=\"color:{series.color};font-size:1rem;\">{series.name}</b>"))
```

```{r}
#view(bt_metrics$data_trd)

hchart(bt_metrics$data_trd, 
       "scatter", 
       hcaes(x = trd_pnl_pct, 
             y = max_ur_drawup, 
             group = trd_rslt)) |>
  hc_add_theme(hc_theme_hcrt()) |>
  hc_title(text = "Backtest - PnL vs. Max Unrealized Gain") |>
  hc_xAxis(title = list(text = "Trade Profit and Loss"),
           plotLines = list(
             list(dashStyle = "Dash", value = 0, color = "black", zIndex = 3)
           )) |>
  hc_yAxis(title = list(text = "Max Unrealized Value")) |>
  hc_tooltip(
    useHTML = TRUE,  # Important for complex tooltips
    formatter = JS(
      "function() {
        let point = this.point;
        let tableRows = `
          <tr><th>Trade #:</th><td>${point.trd_num}</td></tr>
          <tr><th>Profit/Loss:</th><td>${(point.x).toLocaleString(undefined, {style: 'percent', maximumFractionDigits: 2})}</td></tr>
          <tr><th>Max Gain:</th><td>${(point.y).toLocaleString(undefined, {style: 'percent', maximumFractionDigits: 2})}</td></tr>
        `; // Construct table rows
  
        return `
          <div style='background-color: rgba(255, 255, 255, 0.8); padding: 2px; border-radius: 5px;'>
            <table>
              <thead>
                <tr><th colspan='2' style='text-align: center;'>
                  <span style='color:${this.series.color}'>●</span>
                  <span style='color:${this.series.color};font-size:1.05rem;'>${point.trd_rslt}</span>
                </th></tr>
              </thead>
              <tbody>
                ${tableRows}
              </tbody>
            </table>
          </div>
        `; // Return the complete HTML tooltip content
      }"
    )
  )
```

### C++ Indicators

```{r}
sourceCpp("src/macd.cpp")

# Example usage with List:
# data <- rnorm(100) # Example data
# macd_results <- macd(data, 12, 26, 9)
# print(macd_results)

# Example usage with Tibble:
set.seed(123)  # For reproducibility
n <- 200  # Number of data points
dates <- seq(as.Date("2023-01-01"), length.out = n, by = "days")
open <- cumsum(rnorm(n, 0, 1)) + 100  # Starting price around 100
high <- open + runif(n, 0, 5)
low <- open - runif(n, 0, 5)
close <- open + rnorm(n, 0, 2)
# 
# # Create the tibble
stock_data <- tibble(
  date = dates,
  open = open,
  high = high,
  low = low,
  close = close
)

# Calculate MACD using dplyr's mutate
stock_data <- stock_data %>%
  mutate(macdTbl(close, 12, 26, 9))

# Print the first few rows to see the results
print(head(stock_data))

# You can now use the MACD, Signal, and Histogram columns for further analysis
# For example, plot the MACD and Signal lines:
# library(ggplot2)

ggplot(stock_data, aes(x = date)) +
  geom_line(aes(y = MACD, color = "MACD")) +
  geom_line(aes(y = Signal, color = "Signal")) +
  labs(title = "MACD and Signal Lines", x = "Date", y = "Value") +
  scale_color_manual(values = c("MACD" = "blue", "Signal" = "red")) +
  theme_minimal()

# Plot the histogram
ggplot(stock_data, aes(x = date, y = Histogram)) +
  geom_bar(stat = "identity", fill = ifelse(stock_data$Histogram >= 0, "green", "red")) +
  labs(title = "MACD Histogram", x = "Date", y = "Value") +
  theme_minimal()
```
